T[                    _Evaluator.c(  145): evaluator_evaluateFunctionCallExpression] [ START ]evaluator_evaluateFunctionCallExpression
D[                    _Evaluator.c(  150): evaluator_evaluateFunctionCallExpression] Function name is 'write'
T[                    _Evaluator.c(   80): evaluator_evaluateParametersExpression] [ START ]evaluator_evaluateParametersExpression
D[                    _Evaluator.c(   94): evaluator_evaluateParametersExpression] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_evaluateStringLiteralExpression] [ START ]evaluator_evaluateStringLiteralExpression
D[                    _Evaluator.c(   22): evaluator_evaluateStringLiteralExpression] Literal is '"Welcome to Cria World!\n"'
D[                    _Evaluator.c(   26): evaluator_evaluateStringLiteralExpression] literal check
D[                    _Evaluator.c(   26): evaluator_evaluateStringLiteralExpression] literal check
D[                    _Evaluator.c(   30): evaluator_evaluateStringLiteralExpression] set all 
D[                    _Evaluator.c(   63): evaluator_evaluateStringLiteralExpression] Edited string is 'Welcome to Cria World!
'
T[                    _Evaluator.c(   67): evaluator_evaluateStringLiteralExpression] [  END  ]evaluator_evaluateStringLiteralExpression
D[                    _Evaluator.c(   96): evaluator_evaluateParametersExpression] Done 'String literal expression'
D[                    _Evaluator.c(   98): evaluator_evaluateParametersExpression] Add 'Cria String'
T[                    _Evaluator.c(  132): evaluator_evaluateParametersExpression] [  END  ]evaluator_evaluateParametersExpression
D[                    _Evaluator.c(  163): evaluator_evaluateFunctionCallExpression] execute parameters count is '1'
D[                    _Evaluator.c(  168): evaluator_evaluateFunctionCallExpression] Call native function.(write)
T[                    _Evaluator.c(  178): evaluator_evaluateFunctionCallExpression] [  END  ]evaluator_evaluateFunctionCallExpression
T[                    _Evaluator.c(  145): evaluator_evaluateFunctionCallExpression] [ START ]evaluator_evaluateFunctionCallExpression
D[                    _Evaluator.c(  150): evaluator_evaluateFunctionCallExpression] Function name is 'write'
T[                    _Evaluator.c(   80): evaluator_evaluateParametersExpression] [ START ]evaluator_evaluateParametersExpression
D[                    _Evaluator.c(   94): evaluator_evaluateParametersExpression] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_evaluateStringLiteralExpression] [ START ]evaluator_evaluateStringLiteralExpression
D[                    _Evaluator.c(   22): evaluator_evaluateStringLiteralExpression] Literal is '"What's your name? > "'
D[                    _Evaluator.c(   26): evaluator_evaluateStringLiteralExpression] literal check
D[                    _Evaluator.c(   30): evaluator_evaluateStringLiteralExpression] set all 
D[                    _Evaluator.c(   63): evaluator_evaluateStringLiteralExpression] Edited string is 'What's your name? > '
T[                    _Evaluator.c(   67): evaluator_evaluateStringLiteralExpression] [  END  ]evaluator_evaluateStringLiteralExpression
D[                    _Evaluator.c(   96): evaluator_evaluateParametersExpression] Done 'String literal expression'
D[                    _Evaluator.c(   98): evaluator_evaluateParametersExpression] Add 'Cria String'
T[                    _Evaluator.c(  132): evaluator_evaluateParametersExpression] [  END  ]evaluator_evaluateParametersExpression
D[                    _Evaluator.c(  163): evaluator_evaluateFunctionCallExpression] execute parameters count is '1'
D[                    _Evaluator.c(  168): evaluator_evaluateFunctionCallExpression] Call native function.(write)
T[                    _Evaluator.c(  178): evaluator_evaluateFunctionCallExpression] [  END  ]evaluator_evaluateFunctionCallExpression
T[                    _Evaluator.c(  145): evaluator_evaluateFunctionCallExpression] [ START ]evaluator_evaluateFunctionCallExpression
D[                    _Evaluator.c(  150): evaluator_evaluateFunctionCallExpression] Function name is 'write'
T[                    _Evaluator.c(   80): evaluator_evaluateParametersExpression] [ START ]evaluator_evaluateParametersExpression
D[                    _Evaluator.c(   94): evaluator_evaluateParametersExpression] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_evaluateStringLiteralExpression] [ START ]evaluator_evaluateStringLiteralExpression
D[                    _Evaluator.c(   22): evaluator_evaluateStringLiteralExpression] Literal is '"Nice to meet you, %s!\n"'
D[                    _Evaluator.c(   26): evaluator_evaluateStringLiteralExpression] literal check
D[                    _Evaluator.c(   26): evaluator_evaluateStringLiteralExpression] literal check
D[                    _Evaluator.c(   30): evaluator_evaluateStringLiteralExpression] set all 
D[                    _Evaluator.c(   63): evaluator_evaluateStringLiteralExpression] Edited string is 'Nice to meet you, %s!
'
T[                    _Evaluator.c(   67): evaluator_evaluateStringLiteralExpression] [  END  ]evaluator_evaluateStringLiteralExpression
D[                    _Evaluator.c(   96): evaluator_evaluateParametersExpression] Done 'String literal expression'
D[                    _Evaluator.c(   98): evaluator_evaluateParametersExpression] Add 'Cria String'
D[                    _Evaluator.c(  113): evaluator_evaluateParametersExpression] Do 'Function call expression'
T[                    _Evaluator.c(  145): evaluator_evaluateFunctionCallExpression] [ START ]evaluator_evaluateFunctionCallExpression
D[                    _Evaluator.c(  150): evaluator_evaluateFunctionCallExpression] Function name is 'read'
T[                    _Evaluator.c(   80): evaluator_evaluateParametersExpression] [ START ]evaluator_evaluateParametersExpression
T[                    _Evaluator.c(  132): evaluator_evaluateParametersExpression] [  END  ]evaluator_evaluateParametersExpression
D[                    _Evaluator.c(  163): evaluator_evaluateFunctionCallExpression] execute parameters count is '0'
D[                    _Evaluator.c(  168): evaluator_evaluateFunctionCallExpression] Call native function.(read)
T[                           _IO.c(   98): io_read                         ] [ START ]io_read
D[                           _IO.c(  118): io_read                         ] input = 'Oika'
D[                           _IO.c(  118): io_read                         ] input = 'wa M'
D[                           _IO.c(  118): io_read                         ] input = 'asam'
D[                           _IO.c(  118): io_read                         ] input = 'itsu'
D[                           _IO.c(  118): io_read                         ] input = ']
'

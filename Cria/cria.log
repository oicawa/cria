T[                   _Expression.c(   76): expression_parse                ] [ START ]expression_parse
D[                   _Expression.c(   82): expression_parse                ] Check 'StringLiteralExpression'
D[                   _Expression.c(   87): expression_parse                ] Create 'StringLiteralExpression'
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] expression kind is '0'
T[                   _Expression.c(   17): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  108): expression_parse                ] [  END  ]expression_parse
T[                   _Expression.c(   76): expression_parse                ] [ START ]expression_parse
D[                   _Expression.c(   82): expression_parse                ] Check 'StringLiteralExpression'
D[                   _Expression.c(   87): expression_parse                ] Create 'StringLiteralExpression'
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] expression kind is '0'
T[                   _Expression.c(   17): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  108): expression_parse                ] [  END  ]expression_parse
T[                    _Evaluator.c(   88): evaluator_evaluateFunctionCallExpression] [ START ]evaluator_evaluateFunctionCallExpression
T[                    _Evaluator.c(   28): evaluator_evaluateParametersExpression] [ START ]evaluator_evaluateParametersExpression
D[                    _Evaluator.c(   42): evaluator_evaluateParametersExpression] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_evaluateStringLiteralExpression] [ START ]evaluator_evaluateStringLiteralExpression
T[                    _Evaluator.c(   16): evaluator_evaluateStringLiteralExpression] [  END  ]evaluator_evaluateStringLiteralExpression
D[                    _Evaluator.c(   44): evaluator_evaluateParametersExpression] Done 'String literal expression'
D[                    _Evaluator.c(   46): evaluator_evaluateParametersExpression] Add 'Cria String'
D[                    _Evaluator.c(   42): evaluator_evaluateParametersExpression] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_evaluateStringLiteralExpression] [ START ]evaluator_evaluateStringLiteralExpression
T[                    _Evaluator.c(   16): evaluator_evaluateStringLiteralExpression] [  END  ]evaluator_evaluateStringLiteralExpression
D[                    _Evaluator.c(   44): evaluator_evaluateParametersExpression] Done 'String literal expression'
D[                    _Evaluator.c(   46): evaluator_evaluateParametersExpression] Add 'Cria String'
T[                    _Evaluator.c(   75): evaluator_evaluateParametersExpression] [  END  ]evaluator_evaluateParametersExpression
D[                    _Evaluator.c(  105): evaluator_evaluateFunctionCallExpression] execute parameters count is '2'
D[                    _Evaluator.c(  110): evaluator_evaluateFunctionCallExpression] Call native function.(print)
T[                    _Evaluator.c(  120): evaluator_evaluateFunctionCallExpression] [  END  ]evaluator_evaluateFunctionCallExpression
T[                   _Expression.c(   76): expression_parse                ] [ START ]expression_parse
D[                   _Expression.c(   82): expression_parse                ] Check 'StringLiteralExpression'
D[                   _Expression.c(   87): expression_parse                ] Create 'StringLiteralExpression'
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] expression kind is '0'
T[                   _Expression.c(   17): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  108): expression_parse                ] [  END  ]expression_parse
T[                    _Evaluator.c(   88): evaluator_evaluateFunctionCallExpression] [ START ]evaluator_evaluateFunctionCallExpression
T[                    _Evaluator.c(   28): evaluator_evaluateParametersExpression] [ START ]evaluator_evaluateParametersExpression
D[                    _Evaluator.c(   42): evaluator_evaluateParametersExpression] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_evaluateStringLiteralExpression] [ START ]evaluator_evaluateStringLiteralExpression
T[                    _Evaluator.c(   16): evaluator_evaluateStringLiteralExpression] [  END  ]evaluator_evaluateStringLiteralExpression
D[                    _Evaluator.c(   44): evaluator_evaluateParametersExpression] Done 'String literal expression'
D[                    _Evaluator.c(   46): evaluator_evaluateParametersExpression] Add 'Cria String'
T[                    _Evaluator.c(   75): evaluator_evaluateParametersExpression] [  END  ]evaluator_evaluateParametersExpression
D[                    _Evaluator.c(  105): evaluator_evaluateFunctionCallExpression] execute parameters count is '1'
D[                    _Evaluator.c(  110): evaluator_evaluateFunctionCallExpression] Call native function.(print)
T[                    _Evaluator.c(  120): evaluator_evaluateFunctionCallExpression] [  END  ]evaluator_evaluateFunctionCallExpression
T[                   _Expression.c(   76): expression_parse                ] [ START ]expression_parse
D[                   _Expression.c(   82): expression_parse                ] Check 'StringLiteralExpression'
D[                   _Expression.c(   87): expression_parse                ] Create 'StringLiteralExpression'
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] expression kind is '0'
T[                   _Expression.c(   17): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  108): expression_parse                ] [  END  ]expression_parse
T[                    _Evaluator.c(   88): evaluator_evaluateFunctionCallExpression] [ START ]evaluator_evaluateFunctionCallExpression
T[                    _Evaluator.c(   28): evaluator_evaluateParametersExpression] [ START ]evaluator_evaluateParametersExpression
D[                    _Evaluator.c(   42): evaluator_evaluateParametersExpression] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_evaluateStringLiteralExpression] [ START ]evaluator_evaluateStringLiteralExpression
T[                    _Evaluator.c(   16): evaluator_evaluateStringLiteralExpression] [  END  ]evaluator_evaluateStringLiteralExpression
D[                    _Evaluator.c(   44): evaluator_evaluateParametersExpression] Done 'String literal expression'
D[                    _Evaluator.c(   46): evaluator_evaluateParametersExpression] Add 'Cria String'
T[                    _Evaluator.c(   75): evaluator_evaluateParametersExpression] [  END  ]evaluator_evaluateParametersExpression
D[                    _Evaluator.c(  105): evaluator_evaluateFunctionCallExpression] execute parameters count is '1'
D[                    _Evaluator.c(  110): evaluator_evaluateFunctionCallExpression] Call native function.(print)
T[                    _Evaluator.c(  120): evaluator_evaluateFunctionCallExpression] [  END  ]evaluator_evaluateFunctionCallExpression

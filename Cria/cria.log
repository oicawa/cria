T[                   _Expression.c(  111): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  119): parseParametersExpression       ] Token type= 9(  0,  7) ["Welcome to Cria World!\n"]
D[                   _Expression.c(  120): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  123): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  133): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  147): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  149): parseParametersExpression       ] Token type=32(  0, 33) [)]
D[                   _Expression.c(  163): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  171): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  173): parseParametersExpression       ] list count = 1
T[                   _Expression.c(  183): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                   _Expression.c(  111): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  119): parseParametersExpression       ] Token type= 9(  2,  7) ["What's your name? > "]
D[                   _Expression.c(  120): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  123): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  133): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  147): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  149): parseParametersExpression       ] Token type=32(  2, 29) [)]
D[                   _Expression.c(  163): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  171): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  173): parseParametersExpression       ] list count = 1
T[                   _Expression.c(  183): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                   _Expression.c(  111): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  119): parseParametersExpression       ] Token type= 9(  4,  7) ["Nice to meet you, %s!\n"]
D[                   _Expression.c(  120): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  123): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  133): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  147): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  149): parseParametersExpression       ] Token type=51(  4, 32) [, ]
D[                   _Expression.c(  153): parseParametersExpression       ] Token is not Comma.
D[                   _Expression.c(  123): parseParametersExpression       ] Parse expression.
T[                   _Expression.c(  111): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  119): parseParametersExpression       ] Token type=32(  4, 39) [)]
D[                   _Expression.c(  120): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  171): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  173): parseParametersExpression       ] list count = 0
T[                   _Expression.c(  183): parseParametersExpression       ] [  END  ]parseParametersExpression
D[                   _Expression.c(  133): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  147): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  149): parseParametersExpression       ] Token type=32(  4, 40) [)]
D[                   _Expression.c(  163): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  171): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  173): parseParametersExpression       ] list count = 2
T[                   _Expression.c(  183): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                    _Evaluator.c(  152): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  157): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(   94): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"Welcome to Cria World!\n"'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'Welcome to Cria World!
'
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(   96): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(   98): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  139): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  170): evaluator_functionCall          ] execute parameters count is '1'
D[                    _Evaluator.c(  175): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  185): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  152): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  157): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(   94): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"What's your name? > "'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'What's your name? > '
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(   96): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(   98): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  139): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  170): evaluator_functionCall          ] execute parameters count is '1'
D[                    _Evaluator.c(  175): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  185): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  152): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  157): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(   94): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"Nice to meet you, %s!\n"'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'Nice to meet you, %s!
'
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(   96): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(   98): evaluator_parameters            ] Add 'Cria Id'
D[                    _Evaluator.c(  120): evaluator_parameters            ] Do reference expression
T[                    _Evaluator.c(  152): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  157): evaluator_functionCall          ] Function name is 'read'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
T[                    _Evaluator.c(  139): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  170): evaluator_functionCall          ] execute parameters count is '0'
D[                    _Evaluator.c(  175): evaluator_functionCall          ] Call native function.(read)
T[                    _Evaluator.c(  185): evaluator_functionCall          ] [  END  ]evaluator_functionCall
D[                    _Evaluator.c(  122): evaluator_parameters            ] Done reference expression
D[                    _Evaluator.c(  124): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  139): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  170): evaluator_functionCall          ] execute parameters count is '2'
D[                    _Evaluator.c(  175): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  185): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                   _Expression.c(  111): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  119): parseParametersExpression       ] Token type= 9(  0,  7) ["Welcome to Cria World!\n"]
D[                   _Expression.c(  120): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  123): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  133): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  147): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  149): parseParametersExpression       ] Token type=32(  0, 33) [)]
D[                   _Expression.c(  163): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  171): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  173): parseParametersExpression       ] list count = 1
T[                   _Expression.c(  183): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                   _Expression.c(  111): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  119): parseParametersExpression       ] Token type= 9(  2,  7) ["What's your name? > "]
D[                   _Expression.c(  120): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  123): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  133): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  147): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  149): parseParametersExpression       ] Token type=32(  2, 29) [)]
D[                   _Expression.c(  163): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  171): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  173): parseParametersExpression       ] list count = 1
T[                   _Expression.c(  183): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                   _Expression.c(  111): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  119): parseParametersExpression       ] Token type= 9(  4,  7) ["Nice to meet you, %s!\n"]
D[                   _Expression.c(  120): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  123): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  133): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  147): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  149): parseParametersExpression       ] Token type=51(  4, 32) [, ]
D[                   _Expression.c(  153): parseParametersExpression       ] Token is not Comma.
D[                   _Expression.c(  123): parseParametersExpression       ] Parse expression.
T[                   _Expression.c(  111): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  119): parseParametersExpression       ] Token type=32(  4, 39) [)]
D[                   _Expression.c(  120): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  171): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  173): parseParametersExpression       ] list count = 0
T[                   _Expression.c(  183): parseParametersExpression       ] [  END  ]parseParametersExpression
D[                   _Expression.c(  133): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  147): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  149): parseParametersExpression       ] Token type=32(  4, 40) [)]
D[                   _Expression.c(  163): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  171): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  173): parseParametersExpression       ] list count = 2
T[                   _Expression.c(  183): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                    _Evaluator.c(  152): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  157): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(   94): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"Welcome to Cria World!\n"'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'Welcome to Cria World!
'
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(   96): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(   98): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  139): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  170): evaluator_functionCall          ] execute parameters count is '1'
D[                    _Evaluator.c(  175): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  185): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  152): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  157): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(   94): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"What's your name? > "'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'What's your name? > '
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(   96): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(   98): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  139): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  170): evaluator_functionCall          ] execute parameters count is '1'
D[                    _Evaluator.c(  175): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  185): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  152): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  157): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(   94): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"Nice to meet you, %s!\n"'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'Nice to meet you, %s!
'
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(   96): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(   98): evaluator_parameters            ] Add 'Cria Id'
D[                    _Evaluator.c(  120): evaluator_parameters            ] Do reference expression
T[                    _Evaluator.c(  152): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  157): evaluator_functionCall          ] Function name is 'read'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
T[                    _Evaluator.c(  139): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  170): evaluator_functionCall          ] execute parameters count is '0'
D[                    _Evaluator.c(  175): evaluator_functionCall          ] Call native function.(read)
T[                    _Evaluator.c(  185): evaluator_functionCall          ] [  END  ]evaluator_functionCall
D[                    _Evaluator.c(  122): evaluator_parameters            ] Done reference expression
D[                    _Evaluator.c(  124): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  139): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  170): evaluator_functionCall          ] execute parameters count is '2'
D[                    _Evaluator.c(  175): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  185): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  145): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  150): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(   94): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"Welcome to Cria World!\n"'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'Welcome to Cria World!
'
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(   96): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(   98): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  132): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  163): evaluator_functionCall          ] execute parameters count is '1'
D[                    _Evaluator.c(  168): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  178): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  145): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  150): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(   94): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"What's your name? > "'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'What's your name? > '
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(   96): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(   98): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  132): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  163): evaluator_functionCall          ] execute parameters count is '1'
D[                    _Evaluator.c(  168): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  178): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  145): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  150): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(   94): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"Nice to meet you, %s!\n"'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'Nice to meet you, %s!
'
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(   96): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(   98): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  132): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  163): evaluator_functionCall          ] execute parameters count is '1'
D[                    _Evaluator.c(  168): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  178): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                   _Expression.c(  111): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  119): parseParametersExpression       ] Token type= 9(  0,  7) ["Welcome to Cria World!\n"]
D[                   _Expression.c(  120): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  123): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  133): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  147): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  149): parseParametersExpression       ] Token type=32(  0, 33) [)]
D[                   _Expression.c(  163): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  171): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  173): parseParametersExpression       ] list count = 1
T[                   _Expression.c(  183): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                   _Expression.c(  111): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  119): parseParametersExpression       ] Token type= 9(  2,  7) ["What's your name? > "]
D[                   _Expression.c(  120): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  123): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  133): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  147): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  149): parseParametersExpression       ] Token type=32(  2, 29) [)]
D[                   _Expression.c(  163): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  171): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  173): parseParametersExpression       ] list count = 1
T[                   _Expression.c(  183): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                   _Expression.c(  111): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  119): parseParametersExpression       ] Token type= 9(  4,  7) ["Nice to meet you, %s!\n"]
D[                   _Expression.c(  120): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  123): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  133): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  147): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  149): parseParametersExpression       ] Token type=51(  4, 32) [, ]
D[                   _Expression.c(  153): parseParametersExpression       ] Token is not Comma.
D[                   _Expression.c(  123): parseParametersExpression       ] Parse expression.
T[                   _Expression.c(  111): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  119): parseParametersExpression       ] Token type=32(  4, 39) [)]
D[                   _Expression.c(  120): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  171): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  173): parseParametersExpression       ] list count = 0
T[                   _Expression.c(  183): parseParametersExpression       ] [  END  ]parseParametersExpression
D[                   _Expression.c(  133): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  147): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  149): parseParametersExpression       ] Token type=32(  4, 40) [)]
D[                   _Expression.c(  163): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  171): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  173): parseParametersExpression       ] list count = 2
T[                   _Expression.c(  183): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                    _Evaluator.c(  152): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  157): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(   94): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"Welcome to Cria World!\n"'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'Welcome to Cria World!
'
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(   96): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(   98): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  139): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  170): evaluator_functionCall          ] execute parameters count is '1'
D[                    _Evaluator.c(  175): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  185): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  152): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  157): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(   94): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"What's your name? > "'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'What's your name? > '
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(   96): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(   98): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  139): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  170): evaluator_functionCall          ] execute parameters count is '1'
D[                    _Evaluator.c(  175): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  185): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  152): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  157): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(   94): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"Nice to meet you, %s!\n"'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'Nice to meet you, %s!
'
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(   96): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(   98): evaluator_parameters            ] Add 'Cria Id'
D[                    _Evaluator.c(  120): evaluator_parameters            ] Do reference expression
T[                    _Evaluator.c(  152): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  157): evaluator_functionCall          ] Function name is 'read'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
T[                    _Evaluator.c(  139): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  170): evaluator_functionCall          ] execute parameters count is '0'
D[                    _Evaluator.c(  175): evaluator_functionCall          ] Call native function.(read)
T[                    _Evaluator.c(  185): evaluator_functionCall          ] [  END  ]evaluator_functionCall
D[                    _Evaluator.c(  122): evaluator_parameters            ] Done reference expression
D[                    _Evaluator.c(  124): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  139): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  170): evaluator_functionCall          ] execute parameters count is '2'
D[                    _Evaluator.c(  175): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  185): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                   _Expression.c(  111): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  119): parseParametersExpression       ] Token type= 9(  0,  7) ["Welcome to Cria World!\n"]
D[                   _Expression.c(  120): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  123): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  133): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  147): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  149): parseParametersExpression       ] Token type=32(  0, 33) [)]
D[                   _Expression.c(  163): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  171): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  173): parseParametersExpression       ] list count = 1
T[                   _Expression.c(  183): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                   _Expression.c(  111): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  119): parseParametersExpression       ] Token type= 9(  2,  7) ["What's your name? > "]
D[                   _Expression.c(  120): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  123): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  133): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  147): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  149): parseParametersExpression       ] Token type=32(  2, 29) [)]
D[                   _Expression.c(  163): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  171): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  173): parseParametersExpression       ] list count = 1
T[                   _Expression.c(  183): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                   _Expression.c(  111): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  119): parseParametersExpression       ] Token type= 9(  4,  7) ["Nice to meet you, %s!\n"]
D[                   _Expression.c(  120): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  123): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  133): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  147): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  149): parseParametersExpression       ] Token type=51(  4, 32) [, ]
D[                   _Expression.c(  153): parseParametersExpression       ] Token is not Comma.
D[                   _Expression.c(  123): parseParametersExpression       ] Parse expression.
T[                   _Expression.c(  111): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  119): parseParametersExpression       ] Token type=32(  4, 39) [)]
D[                   _Expression.c(  120): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  171): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  173): parseParametersExpression       ] list count = 0
T[                   _Expression.c(  183): parseParametersExpression       ] [  END  ]parseParametersExpression
D[                   _Expression.c(  133): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  147): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  149): parseParametersExpression       ] Token type=32(  4, 40) [)]
D[                   _Expression.c(  163): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  171): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  173): parseParametersExpression       ] list count = 2
T[                   _Expression.c(  183): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                    _Evaluator.c(  152): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  157): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(   94): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"Welcome to Cria World!\n"'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'Welcome to Cria World!
'
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(   96): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(   98): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  139): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  170): evaluator_functionCall          ] execute parameters count is '1'
D[                    _Evaluator.c(  175): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  185): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  152): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  157): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(   94): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"What's your name? > "'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'What's your name? > '
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(   96): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(   98): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  139): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  170): evaluator_functionCall          ] execute parameters count is '1'
D[                    _Evaluator.c(  175): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  185): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  152): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  157): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(   94): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"Nice to meet you, %s!\n"'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'Nice to meet you, %s!
'
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(   96): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(   98): evaluator_parameters            ] Add 'Cria Id'
D[                    _Evaluator.c(  120): evaluator_parameters            ] Do reference expression
T[                    _Evaluator.c(  152): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  157): evaluator_functionCall          ] Function name is 'read'
T[                    _Evaluator.c(   80): evaluator_parameters            ] [ START ]evaluator_parameters
T[                    _Evaluator.c(  139): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  170): evaluator_functionCall          ] execute parameters count is '0'
D[                    _Evaluator.c(  175): evaluator_functionCall          ] Call native function.(read)
T[                    _Evaluator.c(  185): evaluator_functionCall          ] [  END  ]evaluator_functionCall
D[                    _Evaluator.c(  122): evaluator_parameters            ] Done reference expression
D[                    _Evaluator.c(  124): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  139): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  170): evaluator_functionCall          ] execute parameters count is '2'
D[                    _Evaluator.c(  175): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  185): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                   _Expression.c(  117): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  125): parseParametersExpression       ] Token type= 9(  0,  7) ["Welcome to Cria World!\n"]
D[                   _Expression.c(  126): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  129): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  139): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  153): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  155): parseParametersExpression       ] Token type=32(  0, 33) [)]
D[                   _Expression.c(  169): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  177): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  179): parseParametersExpression       ] list count = 1
T[                   _Expression.c(  189): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                   _Expression.c(  117): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  125): parseParametersExpression       ] Token type= 9(  2,  7) ["What's your name? > "]
D[                   _Expression.c(  126): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  129): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  139): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  153): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  155): parseParametersExpression       ] Token type=32(  2, 29) [)]
D[                   _Expression.c(  169): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  177): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  179): parseParametersExpression       ] list count = 1
T[                   _Expression.c(  189): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                   _Expression.c(  117): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  125): parseParametersExpression       ] Token type= 9(  0,  7) ["Welcome to Cria World!\n"]
D[                   _Expression.c(  126): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  129): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  139): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  153): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  155): parseParametersExpression       ] Token type=32(  0, 33) [)]
D[                   _Expression.c(  169): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  177): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  179): parseParametersExpression       ] list count = 1
T[                   _Expression.c(  189): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                   _Expression.c(  117): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  125): parseParametersExpression       ] Token type= 9(  2,  7) ["What's your name? > "]
D[                   _Expression.c(  126): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  129): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  139): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  153): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  155): parseParametersExpression       ] Token type=32(  2, 29) [)]
D[                   _Expression.c(  169): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  177): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  179): parseParametersExpression       ] list count = 1
T[                   _Expression.c(  189): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                   _Expression.c(  117): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  125): parseParametersExpression       ] Token type= 9(  4,  7) ["Nice to meet you, %s!\n"]
D[                   _Expression.c(  126): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  129): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  139): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  153): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  155): parseParametersExpression       ] Token type=51(  4, 32) [, ]
D[                   _Expression.c(  159): parseParametersExpression       ] Token is not Comma.
D[                   _Expression.c(  129): parseParametersExpression       ] Parse expression.
T[                   _Expression.c(  117): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  125): parseParametersExpression       ] Token type=32(  4, 39) [)]
D[                   _Expression.c(  126): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  177): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  179): parseParametersExpression       ] list count = 0
T[                   _Expression.c(  189): parseParametersExpression       ] [  END  ]parseParametersExpression
D[                   _Expression.c(  139): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  153): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  155): parseParametersExpression       ] Token type=32(  4, 40) [)]
D[                   _Expression.c(  169): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  177): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  179): parseParametersExpression       ] list count = 2
T[                   _Expression.c(  189): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                    _Evaluator.c(  238): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  243): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(  166): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(  180): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"Welcome to Cria World!\n"'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'Welcome to Cria World!
'
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(  182): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(  184): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  225): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  256): evaluator_functionCall          ] execute parameters count is '1'
D[                    _Evaluator.c(  261): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  271): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  238): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  243): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(  166): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(  180): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"What's your name? > "'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'What's your name? > '
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(  182): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(  184): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  225): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  256): evaluator_functionCall          ] execute parameters count is '1'
D[                    _Evaluator.c(  261): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  271): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  238): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  243): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(  166): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(  180): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"Nice to meet you, %s!\n"'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'Nice to meet you, %s!
'
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(  182): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(  184): evaluator_parameters            ] Add 'Cria Id'
D[                    _Evaluator.c(  206): evaluator_parameters            ] Do reference expression
T[                    _Evaluator.c(  238): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  243): evaluator_functionCall          ] Function name is 'read'
T[                    _Evaluator.c(  166): evaluator_parameters            ] [ START ]evaluator_parameters
T[                    _Evaluator.c(  225): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  256): evaluator_functionCall          ] execute parameters count is '0'
D[                    _Evaluator.c(  261): evaluator_functionCall          ] Call native function.(read)
T[                    _Evaluator.c(  271): evaluator_functionCall          ] [  END  ]evaluator_functionCall
D[                    _Evaluator.c(  208): evaluator_parameters            ] Done reference expression
D[                    _Evaluator.c(  210): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  225): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  256): evaluator_functionCall          ] execute parameters count is '2'
D[                    _Evaluator.c(  261): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  271): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                   _Expression.c(  117): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  125): parseParametersExpression       ] Token type= 9(  0,  7) ["Welcome to Cria World!\n"]
D[                   _Expression.c(  126): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  129): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  139): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  153): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  155): parseParametersExpression       ] Token type=32(  0, 33) [)]
D[                   _Expression.c(  169): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  177): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  179): parseParametersExpression       ] list count = 1
T[                   _Expression.c(  189): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                   _Expression.c(  117): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  125): parseParametersExpression       ] Token type= 9(  2,  7) ["What's your name? > "]
D[                   _Expression.c(  126): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  129): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  139): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  153): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  155): parseParametersExpression       ] Token type=32(  2, 29) [)]
D[                   _Expression.c(  169): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  177): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  179): parseParametersExpression       ] list count = 1
T[                   _Expression.c(  189): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                   _Expression.c(  117): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  125): parseParametersExpression       ] Token type= 9(  4,  7) ["Nice to meet you, %s!\n"]
D[                   _Expression.c(  126): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  129): parseParametersExpression       ] Parse expression.
D[                   _Expression.c(  139): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  153): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  155): parseParametersExpression       ] Token type=51(  4, 32) [, ]
D[                   _Expression.c(  159): parseParametersExpression       ] Token is not Comma.
D[                   _Expression.c(  129): parseParametersExpression       ] Parse expression.
T[                   _Expression.c(  117): parseParametersExpression       ] [ START ]parseParametersExpression
D[                   _Expression.c(  125): parseParametersExpression       ] Token type=32(  4, 39) [)]
D[                   _Expression.c(  126): parseParametersExpression       ] Loop start.
D[                   _Expression.c(  177): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  179): parseParametersExpression       ] list count = 0
T[                   _Expression.c(  189): parseParametersExpression       ] [  END  ]parseParametersExpression
D[                   _Expression.c(  139): parseParametersExpression       ] Add expression.
D[                   _Expression.c(  153): parseParametersExpression       ] Get current token.
D[                   _Expression.c(  155): parseParametersExpression       ] Token type=32(  4, 40) [)]
D[                   _Expression.c(  169): parseParametersExpression       ] Token is not right parenthesis.
D[                   _Expression.c(  177): parseParametersExpression       ] Loop end.
D[                   _Expression.c(  179): parseParametersExpression       ] list count = 2
T[                   _Expression.c(  189): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                    _Evaluator.c(  238): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  243): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(  166): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(  180): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"Welcome to Cria World!\n"'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'Welcome to Cria World!
'
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(  182): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(  184): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  225): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  256): evaluator_functionCall          ] execute parameters count is '1'
D[                    _Evaluator.c(  261): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  271): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  238): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  243): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(  166): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(  180): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"What's your name? > "'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'What's your name? > '
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(  182): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(  184): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  225): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  256): evaluator_functionCall          ] execute parameters count is '1'
D[                    _Evaluator.c(  261): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  271): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  238): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  243): evaluator_functionCall          ] Function name is 'write'
T[                    _Evaluator.c(  166): evaluator_parameters            ] [ START ]evaluator_parameters
D[                    _Evaluator.c(  180): evaluator_parameters            ] Do 'String literal expression'
T[                    _Evaluator.c(   13): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
D[                    _Evaluator.c(   22): evaluator_stringLiteral         ] Literal is '"Nice to meet you, %s!\n"'
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   26): evaluator_stringLiteral         ] literal check
D[                    _Evaluator.c(   30): evaluator_stringLiteral         ] set all 
D[                    _Evaluator.c(   63): evaluator_stringLiteral         ] Edited string is 'Nice to meet you, %s!
'
T[                    _Evaluator.c(   67): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
D[                    _Evaluator.c(  182): evaluator_parameters            ] Done 'String literal expression'
D[                    _Evaluator.c(  184): evaluator_parameters            ] Add 'Cria Id'
D[                    _Evaluator.c(  206): evaluator_parameters            ] Do reference expression
T[                    _Evaluator.c(  238): evaluator_functionCall          ] [ START ]evaluator_functionCall
D[                    _Evaluator.c(  243): evaluator_functionCall          ] Function name is 'read'
T[                    _Evaluator.c(  166): evaluator_parameters            ] [ START ]evaluator_parameters
T[                    _Evaluator.c(  225): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  256): evaluator_functionCall          ] execute parameters count is '0'
D[                    _Evaluator.c(  261): evaluator_functionCall          ] Call native function.(read)
T[                    _Evaluator.c(  271): evaluator_functionCall          ] [  END  ]evaluator_functionCall
D[                    _Evaluator.c(  208): evaluator_parameters            ] Done reference expression
D[                    _Evaluator.c(  210): evaluator_parameters            ] Add 'Cria Id'
T[                    _Evaluator.c(  225): evaluator_parameters            ] [  END  ]evaluator_parameters
D[                    _Evaluator.c(  256): evaluator_functionCall          ] execute parameters count is '2'
D[                    _Evaluator.c(  261): evaluator_functionCall          ] Call native function.(write)
T[                    _Evaluator.c(  271): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                  _Interpreter.c(   42): interpreter_loadCore            ] [ START ]interpreter_loadCore
T[                  _Interpreter.c(   28): Interpreter_addFunction         ] [ START ]Interpreter_addFunction
T[                  _Interpreter.c(   32): Interpreter_addFunction         ] [  END  ]Interpreter_addFunction
T[                  _Interpreter.c(   28): Interpreter_addFunction         ] [ START ]Interpreter_addFunction
T[                  _Interpreter.c(   32): Interpreter_addFunction         ] [  END  ]Interpreter_addFunction
T[                  _Interpreter.c(   45): interpreter_loadCore            ] [  END  ]interpreter_loadCore
T[                  _Interpreter.c(  107): Interpreter_compile             ] [ START ]Interpreter_compile
T[                    _Tokenizer.c(  128): tokenizer_new                   ] [ START ]tokenizer_new
T[                    _Tokenizer.c(  149): tokenizer_new                   ] [  END  ]tokenizer_new
T[                    _Tokenizer.c( 1300): tokenizer_parse                 ] [ START ]tokenizer_parse
T[                    _Tokenizer.c(  613): parseIdentifier                 ] [ START ]parseIdentifier
T[                    _Tokenizer.c(  308): parseReserved                   ] [ START ]parseReserved
T[                    _Tokenizer.c(  450): parseReserved                   ] [  END  ]parseReserved
T[                    _Tokenizer.c(  462): parseVariableOrFunction         ] [ START ]parseVariableOrFunction
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  507): parseVariableOrFunction         ] [  END  ]parseVariableOrFunction
T[                    _Tokenizer.c(  670): parseIdentifier                 ] [  END  ]parseIdentifier
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(()
T[                    _Tokenizer.c( 1108): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_LEFT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(")
T[                    _Tokenizer.c( 1213): parseOther                      ] Try string literal.
T[                    _Tokenizer.c(  917): parseStringLiteral              ] [ START ]parseStringLiteral
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  968): parseStringLiteral              ] [  END  ]parseStringLiteral
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c(  708): parseSpace                      ] [ START ]parseSpace
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  906): parseSpace                      ] [  END  ]parseSpace
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(")
T[                    _Tokenizer.c( 1213): parseOther                      ] Try string literal.
T[                    _Tokenizer.c(  917): parseStringLiteral              ] [ START ]parseStringLiteral
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  968): parseStringLiteral              ] [  END  ]parseStringLiteral
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.())
T[                    _Tokenizer.c( 1114): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_RIGHT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(
)
T[                    _Tokenizer.c( 1220): parseOther                      ] Create 'TOKEN_TYPE_NEW_LINE'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1229): parseOther                      ] Try indent/dedent literal.
T[                    _Tokenizer.c(  979): parseIndentDedent               ] [ START ]parseIndentDedent
T[                    _Tokenizer.c( 1077): parseIndentDedent               ] [  END  ]parseIndentDedent
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c(  613): parseIdentifier                 ] [ START ]parseIdentifier
T[                    _Tokenizer.c(  308): parseReserved                   ] [ START ]parseReserved
T[                    _Tokenizer.c(  450): parseReserved                   ] [  END  ]parseReserved
T[                    _Tokenizer.c(  462): parseVariableOrFunction         ] [ START ]parseVariableOrFunction
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  507): parseVariableOrFunction         ] [  END  ]parseVariableOrFunction
T[                    _Tokenizer.c(  670): parseIdentifier                 ] [  END  ]parseIdentifier
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(()
T[                    _Tokenizer.c( 1108): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_LEFT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(")
T[                    _Tokenizer.c( 1213): parseOther                      ] Try string literal.
T[                    _Tokenizer.c(  917): parseStringLiteral              ] [ START ]parseStringLiteral
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  968): parseStringLiteral              ] [  END  ]parseStringLiteral
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(,)
T[                    _Tokenizer.c( 1186): parseOther                      ] Try comma literal.
T[                    _Tokenizer.c( 1206): parseOther                      ] Create 'TOKEN_TYPE_COMMA'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c(  613): parseIdentifier                 ] [ START ]parseIdentifier
T[                    _Tokenizer.c(  308): parseReserved                   ] [ START ]parseReserved
T[                    _Tokenizer.c(  450): parseReserved                   ] [  END  ]parseReserved
T[                    _Tokenizer.c(  462): parseVariableOrFunction         ] [ START ]parseVariableOrFunction
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  507): parseVariableOrFunction         ] [  END  ]parseVariableOrFunction
T[                    _Tokenizer.c(  670): parseIdentifier                 ] [  END  ]parseIdentifier
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(()
T[                    _Tokenizer.c( 1108): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_LEFT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.())
T[                    _Tokenizer.c( 1114): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_RIGHT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.())
T[                    _Tokenizer.c( 1114): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_RIGHT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(
)
T[                    _Tokenizer.c( 1220): parseOther                      ] Create 'TOKEN_TYPE_NEW_LINE'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1229): parseOther                      ] Try indent/dedent literal.
T[                    _Tokenizer.c(  979): parseIndentDedent               ] [ START ]parseIndentDedent
T[                    _Tokenizer.c( 1077): parseIndentDedent               ] [  END  ]parseIndentDedent
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1359): tokenizer_parse                 ] result = 1
T[                    _Tokenizer.c( 1360): tokenizer_parse                 ] [  END  ]tokenizer_parse
T[                       _Parser.c(   13): parser_new                      ] [ START ]parser_new
T[                       _Parser.c(   22): parser_new                      ] [  END  ]parser_new
T[                       _Parser.c(  210): parser_parse                    ] [ START ]parser_parse
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                    _Statement.c(  233): statement_parse                 ] [ START ]statement_parse
T[                    _Statement.c(   74): isMatchSubstituteStatement      ] [ START ]isMatchSubstituteStatement
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                    _Statement.c(  106): isMatchSubstituteStatement      ] [  END  ]isMatchSubstituteStatement
T[                    _Statement.c(  178): parseFunctionCallStatement      ] [ START ]parseFunctionCallStatement
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  200): parseFunctionCallExpression     ] [ START ]parseFunctionCallExpression
T[                   _Expression.c(  117): parseParametersExpression       ] [ START ]parseParametersExpression
T[                   _Expression.c(  910): expression_parse                ] [ START ]expression_parse
T[                   _Expression.c(  847): parseAndOr                      ] [ START ]parseAndOr
T[                   _Expression.c(  788): parseNotEqual                   ] [ START ]parseNotEqual
T[                   _Expression.c(  721): parseCompare                    ] [ START ]parseCompare
T[                   _Expression.c(  665): parsePlusMinus                  ] [ START ]parsePlusMinus
T[                   _Expression.c(  602): parseMultiplyDivide             ] [ START ]parseMultiplyDivide
T[                   _Expression.c(  519): parseFactor                     ] [ START ]parseFactor
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  591): parseFactor                     ] [  END  ]parseFactor
T[                   _Expression.c(  654): parseMultiplyDivide             ] [  END  ]parseMultiplyDivide
T[                   _Expression.c(  910): expression_parse                ] [ START ]expression_parse
T[                   _Expression.c(  847): parseAndOr                      ] [ START ]parseAndOr
T[                   _Expression.c(  788): parseNotEqual                   ] [ START ]parseNotEqual
T[                   _Expression.c(  721): parseCompare                    ] [ START ]parseCompare
T[                   _Expression.c(  665): parsePlusMinus                  ] [ START ]parsePlusMinus
T[                   _Expression.c(  602): parseMultiplyDivide             ] [ START ]parseMultiplyDivide
T[                   _Expression.c(  519): parseFactor                     ] [ START ]parseFactor
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  591): parseFactor                     ] [  END  ]parseFactor
T[                   _Expression.c(  654): parseMultiplyDivide             ] [  END  ]parseMultiplyDivide
T[                   _Expression.c(  710): parsePlusMinus                  ] [  END  ]parsePlusMinus
T[                   _Expression.c(  777): parseCompare                    ] [  END  ]parseCompare
T[                   _Expression.c(  836): parseNotEqual                   ] [  END  ]parseNotEqual
T[                   _Expression.c(  899): parseAndOr                      ] [  END  ]parseAndOr
T[                   _Expression.c(  915): expression_parse                ] [  END  ]expression_parse
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  710): parsePlusMinus                  ] [  END  ]parsePlusMinus
T[                   _Expression.c(  777): parseCompare                    ] [  END  ]parseCompare
T[                   _Expression.c(  836): parseNotEqual                   ] [  END  ]parseNotEqual
T[                   _Expression.c(  899): parseAndOr                      ] [  END  ]parseAndOr
T[                   _Expression.c(  915): expression_parse                ] [  END  ]expression_parse
T[                   _Expression.c(  189): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                   _Expression.c(  273): parseFunctionCallExpression     ] [  END  ]parseFunctionCallExpression
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                    _Statement.c(  222): parseFunctionCallStatement      ] [  END  ]parseFunctionCallStatement
T[                    _Statement.c(  355): statement_parse                 ] [  END  ]statement_parse
T[                       _Parser.c(  196): addStatement                    ] [ START ]addStatement
T[                       _Parser.c(  197): addStatement                    ] statement is [0x805d498]
T[                       _Parser.c(  199): addStatement                    ] [  END  ]addStatement
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                    _Statement.c(  233): statement_parse                 ] [ START ]statement_parse
T[                    _Statement.c(   74): isMatchSubstituteStatement      ] [ START ]isMatchSubstituteStatement
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                    _Statement.c(  106): isMatchSubstituteStatement      ] [  END  ]isMatchSubstituteStatement
T[                    _Statement.c(  178): parseFunctionCallStatement      ] [ START ]parseFunctionCallStatement
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  200): parseFunctionCallExpression     ] [ START ]parseFunctionCallExpression
T[                   _Expression.c(  117): parseParametersExpression       ] [ START ]parseParametersExpression
T[                   _Expression.c(  910): expression_parse                ] [ START ]expression_parse
T[                   _Expression.c(  847): parseAndOr                      ] [ START ]parseAndOr
T[                   _Expression.c(  788): parseNotEqual                   ] [ START ]parseNotEqual
T[                   _Expression.c(  721): parseCompare                    ] [ START ]parseCompare
T[                   _Expression.c(  665): parsePlusMinus                  ] [ START ]parsePlusMinus
T[                   _Expression.c(  602): parseMultiplyDivide             ] [ START ]parseMultiplyDivide
T[                   _Expression.c(  519): parseFactor                     ] [ START ]parseFactor
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  591): parseFactor                     ] [  END  ]parseFactor
T[                   _Expression.c(  654): parseMultiplyDivide             ] [  END  ]parseMultiplyDivide
T[                   _Expression.c(  710): parsePlusMinus                  ] [  END  ]parsePlusMinus
T[                   _Expression.c(  777): parseCompare                    ] [  END  ]parseCompare
T[                   _Expression.c(  836): parseNotEqual                   ] [  END  ]parseNotEqual
T[                   _Expression.c(  899): parseAndOr                      ] [  END  ]parseAndOr
T[                   _Expression.c(  915): expression_parse                ] [  END  ]expression_parse
T[                   _Expression.c(  910): expression_parse                ] [ START ]expression_parse
T[                   _Expression.c(  847): parseAndOr                      ] [ START ]parseAndOr
T[                   _Expression.c(  788): parseNotEqual                   ] [ START ]parseNotEqual
T[                   _Expression.c(  721): parseCompare                    ] [ START ]parseCompare
T[                   _Expression.c(  665): parsePlusMinus                  ] [ START ]parsePlusMinus
T[                   _Expression.c(  602): parseMultiplyDivide             ] [ START ]parseMultiplyDivide
T[                   _Expression.c(  519): parseFactor                     ] [ START ]parseFactor
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  200): parseFunctionCallExpression     ] [ START ]parseFunctionCallExpression
T[                   _Expression.c(  117): parseParametersExpression       ] [ START ]parseParametersExpression
T[                   _Expression.c(  189): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                   _Expression.c(  273): parseFunctionCallExpression     ] [  END  ]parseFunctionCallExpression
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  591): parseFactor                     ] [  END  ]parseFactor
T[                   _Expression.c(  654): parseMultiplyDivide             ] [  END  ]parseMultiplyDivide
T[                   _Expression.c(  710): parsePlusMinus                  ] [  END  ]parsePlusMinus
T[                   _Expression.c(  777): parseCompare                    ] [  END  ]parseCompare
T[                   _Expression.c(  836): parseNotEqual                   ] [  END  ]parseNotEqual
T[                   _Expression.c(  899): parseAndOr                      ] [  END  ]parseAndOr
T[                   _Expression.c(  915): expression_parse                ] [  END  ]expression_parse
T[                   _Expression.c(  189): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                   _Expression.c(  273): parseFunctionCallExpression     ] [  END  ]parseFunctionCallExpression
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                    _Statement.c(  222): parseFunctionCallStatement      ] [  END  ]parseFunctionCallStatement
T[                    _Statement.c(  355): statement_parse                 ] [  END  ]statement_parse
T[                       _Parser.c(  196): addStatement                    ] [ START ]addStatement
T[                       _Parser.c(  197): addStatement                    ] statement is [0x805d860]
T[                       _Parser.c(  199): addStatement                    ] [  END  ]addStatement
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                    _Statement.c(  233): statement_parse                 ] [ START ]statement_parse
T[                    _Statement.c(  355): statement_parse                 ] [  END  ]statement_parse
T[                       _Parser.c(  282): parser_parse                    ] [  END  ]parser_parse
T[                       _Parser.c(   33): parser_dispose                  ] [ START ]parser_dispose
T[                       _Parser.c(   58): parser_dispose                  ] [  END  ]parser_dispose
T[                    _Tokenizer.c(  161): tokenizer_dispose               ] [ START ]tokenizer_dispose
T[                    _Tokenizer.c(  207): tokenizer_dispose               ] [  END  ]tokenizer_dispose
T[                  _Interpreter.c(  145): Interpreter_compile             ] [  END  ]Interpreter_compile
T[                  _Interpreter.c(  157): Interpreter_run                 ] [ START ]Interpreter_run
T[                     _Executor.c(   52): executor_executeStatement       ] [ START ]executor_executeStatement
T[                     _Executor.c(   38): executor_executeFunctionCallStatement] [ START ]executor_executeFunctionCallStatement
T[                    _Evaluator.c(  327): evaluator_reference             ] [ START ]evaluator_reference
T[                    _Evaluator.c(  281): evaluator_functionCall          ] [ START ]evaluator_functionCall
T[                    _Evaluator.c(  199): evaluator_parameters            ] [ START ]evaluator_parameters
T[                    _Evaluator.c(  128): evaluator_operation             ] [ START ]evaluator_operation
T[                    _Evaluator.c(  362): evaluator_expression            ] [ START ]evaluator_expression
T[                    _Evaluator.c(   31): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
T[                   _CriaString.c(   12): CriaString_new                  ] [ START ]CriaString_new
T[                   _CriaString.c(   21): CriaString_new                  ] [  END  ]CriaString_new
T[                    _Evaluator.c(   85): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
T[                    _Evaluator.c(  415): evaluator_expression            ] [  END  ]evaluator_expression
T[                    _Evaluator.c(  362): evaluator_expression            ] [ START ]evaluator_expression
T[                    _Evaluator.c(   31): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
T[                   _CriaString.c(   12): CriaString_new                  ] [ START ]CriaString_new
T[                   _CriaString.c(   21): CriaString_new                  ] [  END  ]CriaString_new
T[                    _Evaluator.c(   85): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
T[                    _Evaluator.c(  415): evaluator_expression            ] [  END  ]evaluator_expression
T[                   _CriaString.c(   12): CriaString_new                  ] [ START ]CriaString_new
T[                   _CriaString.c(   21): CriaString_new                  ] [  END  ]CriaString_new
T[                    _Evaluator.c(  186): evaluator_operation             ] [  END  ]evaluator_operation
T[                    _Evaluator.c(  268): evaluator_parameters            ] [  END  ]evaluator_parameters
T[                           _IO.c(   13): io_write                        ] [ START ]io_write
T[                       _CriaId.c(   11): CriaId_new                      ] [ START ]CriaId_new
T[                       _CriaId.c(   16): CriaId_new                      ] [  END  ]CriaId_new
T[                           _IO.c(   92): io_write                        ] [  END  ]io_write
T[                    _Evaluator.c(  314): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  349): evaluator_reference             ] [  END  ]evaluator_reference
T[                     _Executor.c(   40): executor_executeFunctionCallStatement] [  END  ]executor_executeFunctionCallStatement
T[                     _Executor.c(   99): executor_executeStatement       ] [  END  ]executor_executeStatement
T[                     _Executor.c(   52): executor_executeStatement       ] [ START ]executor_executeStatement
T[                     _Executor.c(   38): executor_executeFunctionCallStatement] [ START ]executor_executeFunctionCallStatement
T[                    _Evaluator.c(  327): evaluator_reference             ] [ START ]evaluator_reference
T[                    _Evaluator.c(  281): evaluator_functionCall          ] [ START ]evaluator_functionCall
T[                    _Evaluator.c(  199): evaluator_parameters            ] [ START ]evaluator_parameters
T[                    _Evaluator.c(   31): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
T[                   _CriaString.c(   12): CriaString_new                  ] [ START ]CriaString_new
T[                   _CriaString.c(   21): CriaString_new                  ] [  END  ]CriaString_new
T[                    _Evaluator.c(   85): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
T[                    _Evaluator.c(  327): evaluator_reference             ] [ START ]evaluator_reference
T[                    _Evaluator.c(  281): evaluator_functionCall          ] [ START ]evaluator_functionCall
T[                    _Evaluator.c(  199): evaluator_parameters            ] [ START ]evaluator_parameters
T[                    _Evaluator.c(  268): evaluator_parameters            ] [  END  ]evaluator_parameters
T[                           _IO.c(  104): io_read                         ] [ START ]io_read
T[                   _CriaString.c(   12): CriaString_new                  ] [ START ]CriaString_new
T[                   _CriaString.c(   21): CriaString_new                  ] [  END  ]CriaString_new
T[                           _IO.c(  139): io_read                         ] [  END  ]io_read
T[                    _Evaluator.c(  314): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  349): evaluator_reference             ] [  END  ]evaluator_reference
T[                    _Evaluator.c(  268): evaluator_parameters            ] [  END  ]evaluator_parameters
T[                           _IO.c(   13): io_write                        ] [ START ]io_write
T[                       _CriaId.c(   11): CriaId_new                      ] [ START ]CriaId_new
T[                       _CriaId.c(   16): CriaId_new                      ] [  END  ]CriaId_new
T[                           _IO.c(   92): io_write                        ] [  END  ]io_write
T[                    _Evaluator.c(  314): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  349): evaluator_reference             ] [  END  ]evaluator_reference
T[                     _Executor.c(   40): executor_executeFunctionCallStatement] [  END  ]executor_executeFunctionCallStatement
T[                     _Executor.c(   99): executor_executeStatement       ] [  END  ]executor_executeStatement
T[                  _Interpreter.c(  168): Interpreter_run                 ] [  END  ]Interpreter_run
T[                  _Interpreter.c(   80): Interpreter_dispose             ] [ START ]Interpreter_dispose
T[                  _Interpreter.c(   96): Interpreter_dispose             ] [  END  ]Interpreter_dispose
T[                  _Interpreter.c(   42): interpreter_loadCore            ] [ START ]interpreter_loadCore
T[                  _Interpreter.c(   28): Interpreter_addFunction         ] [ START ]Interpreter_addFunction
T[                  _Interpreter.c(   32): Interpreter_addFunction         ] [  END  ]Interpreter_addFunction
T[                  _Interpreter.c(   28): Interpreter_addFunction         ] [ START ]Interpreter_addFunction
T[                  _Interpreter.c(   32): Interpreter_addFunction         ] [  END  ]Interpreter_addFunction
T[                  _Interpreter.c(   45): interpreter_loadCore            ] [  END  ]interpreter_loadCore
T[                  _Interpreter.c(  107): Interpreter_compile             ] [ START ]Interpreter_compile
T[                    _Tokenizer.c(  128): tokenizer_new                   ] [ START ]tokenizer_new
T[                    _Tokenizer.c(  149): tokenizer_new                   ] [  END  ]tokenizer_new
T[                    _Tokenizer.c( 1300): tokenizer_parse                 ] [ START ]tokenizer_parse
T[                    _Tokenizer.c(  613): parseIdentifier                 ] [ START ]parseIdentifier
T[                    _Tokenizer.c(  308): parseReserved                   ] [ START ]parseReserved
T[                    _Tokenizer.c(  450): parseReserved                   ] [  END  ]parseReserved
T[                    _Tokenizer.c(  462): parseVariableOrFunction         ] [ START ]parseVariableOrFunction
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  507): parseVariableOrFunction         ] [  END  ]parseVariableOrFunction
T[                    _Tokenizer.c(  670): parseIdentifier                 ] [  END  ]parseIdentifier
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(()
T[                    _Tokenizer.c( 1108): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_LEFT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(()
T[                    _Tokenizer.c( 1108): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_LEFT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c(  258): parseNumber                     ] [ START ]parseNumber
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  297): parseNumber                     ] [  END  ]parseNumber
T[                    _Tokenizer.c(  708): parseSpace                      ] [ START ]parseSpace
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  906): parseSpace                      ] [  END  ]parseSpace
T[                    _Tokenizer.c(  258): parseNumber                     ] [ START ]parseNumber
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  297): parseNumber                     ] [  END  ]parseNumber
T[                    _Tokenizer.c(  708): parseSpace                      ] [ START ]parseSpace
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  906): parseSpace                      ] [  END  ]parseSpace
T[                    _Tokenizer.c(  258): parseNumber                     ] [ START ]parseNumber
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  297): parseNumber                     ] [  END  ]parseNumber
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.())
T[                    _Tokenizer.c( 1114): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_RIGHT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c(  708): parseSpace                      ] [ START ]parseSpace
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  906): parseSpace                      ] [  END  ]parseSpace
T[                    _Tokenizer.c(  258): parseNumber                     ] [ START ]parseNumber
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  297): parseNumber                     ] [  END  ]parseNumber
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.())
T[                    _Tokenizer.c( 1114): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_RIGHT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(
)
T[                    _Tokenizer.c( 1220): parseOther                      ] Create 'TOKEN_TYPE_NEW_LINE'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1229): parseOther                      ] Try indent/dedent literal.
T[                    _Tokenizer.c(  979): parseIndentDedent               ] [ START ]parseIndentDedent
T[                    _Tokenizer.c( 1077): parseIndentDedent               ] [  END  ]parseIndentDedent
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1359): tokenizer_parse                 ] result = 1
T[                    _Tokenizer.c( 1360): tokenizer_parse                 ] [  END  ]tokenizer_parse
T[                       _Parser.c(   13): parser_new                      ] [ START ]parser_new
T[                       _Parser.c(   22): parser_new                      ] [  END  ]parser_new
T[                       _Parser.c(  210): parser_parse                    ] [ START ]parser_parse
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                    _Statement.c(  233): statement_parse                 ] [ START ]statement_parse
T[                    _Statement.c(   74): isMatchSubstituteStatement      ] [ START ]isMatchSubstituteStatement
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                    _Statement.c(  106): isMatchSubstituteStatement      ] [  END  ]isMatchSubstituteStatement
T[                    _Statement.c(  178): parseFunctionCallStatement      ] [ START ]parseFunctionCallStatement
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  200): parseFunctionCallExpression     ] [ START ]parseFunctionCallExpression
T[                   _Expression.c(  117): parseParametersExpression       ] [ START ]parseParametersExpression
T[                   _Expression.c(  910): expression_parse                ] [ START ]expression_parse
T[                   _Expression.c(  847): parseAndOr                      ] [ START ]parseAndOr
T[                   _Expression.c(  788): parseNotEqual                   ] [ START ]parseNotEqual
T[                   _Expression.c(  721): parseCompare                    ] [ START ]parseCompare
T[                   _Expression.c(  665): parsePlusMinus                  ] [ START ]parsePlusMinus
T[                   _Expression.c(  602): parseMultiplyDivide             ] [ START ]parseMultiplyDivide
T[                   _Expression.c(  519): parseFactor                     ] [ START ]parseFactor
T[                   _Expression.c(  910): expression_parse                ] [ START ]expression_parse
T[                   _Expression.c(  847): parseAndOr                      ] [ START ]parseAndOr
T[                   _Expression.c(  788): parseNotEqual                   ] [ START ]parseNotEqual
T[                   _Expression.c(  721): parseCompare                    ] [ START ]parseCompare
T[                   _Expression.c(  665): parsePlusMinus                  ] [ START ]parsePlusMinus
T[                   _Expression.c(  602): parseMultiplyDivide             ] [ START ]parseMultiplyDivide
T[                   _Expression.c(  519): parseFactor                     ] [ START ]parseFactor
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  591): parseFactor                     ] [  END  ]parseFactor
T[                   _Expression.c(  654): parseMultiplyDivide             ] [  END  ]parseMultiplyDivide
T[                   _Expression.c(  910): expression_parse                ] [ START ]expression_parse
T[                   _Expression.c(  847): parseAndOr                      ] [ START ]parseAndOr
T[                   _Expression.c(  788): parseNotEqual                   ] [ START ]parseNotEqual
T[                   _Expression.c(  721): parseCompare                    ] [ START ]parseCompare
T[                   _Expression.c(  665): parsePlusMinus                  ] [ START ]parsePlusMinus
T[                   _Expression.c(  602): parseMultiplyDivide             ] [ START ]parseMultiplyDivide
T[                   _Expression.c(  519): parseFactor                     ] [ START ]parseFactor
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  591): parseFactor                     ] [  END  ]parseFactor
T[                   _Expression.c(  654): parseMultiplyDivide             ] [  END  ]parseMultiplyDivide
T[                   _Expression.c(  910): expression_parse                ] [ START ]expression_parse
T[                   _Expression.c(  847): parseAndOr                      ] [ START ]parseAndOr
T[                   _Expression.c(  788): parseNotEqual                   ] [ START ]parseNotEqual
T[                   _Expression.c(  721): parseCompare                    ] [ START ]parseCompare
T[                   _Expression.c(  665): parsePlusMinus                  ] [ START ]parsePlusMinus
T[                   _Expression.c(  602): parseMultiplyDivide             ] [ START ]parseMultiplyDivide
T[                   _Expression.c(  519): parseFactor                     ] [ START ]parseFactor
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  591): parseFactor                     ] [  END  ]parseFactor
T[                   _Expression.c(  654): parseMultiplyDivide             ] [  END  ]parseMultiplyDivide
T[                   _Expression.c(  710): parsePlusMinus                  ] [  END  ]parsePlusMinus
T[                   _Expression.c(  777): parseCompare                    ] [  END  ]parseCompare
T[                   _Expression.c(  836): parseNotEqual                   ] [  END  ]parseNotEqual
T[                   _Expression.c(  899): parseAndOr                      ] [  END  ]parseAndOr
T[                   _Expression.c(  915): expression_parse                ] [  END  ]expression_parse
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  710): parsePlusMinus                  ] [  END  ]parsePlusMinus
T[                   _Expression.c(  777): parseCompare                    ] [  END  ]parseCompare
T[                   _Expression.c(  836): parseNotEqual                   ] [  END  ]parseNotEqual
T[                   _Expression.c(  899): parseAndOr                      ] [  END  ]parseAndOr
T[                   _Expression.c(  915): expression_parse                ] [  END  ]expression_parse
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  710): parsePlusMinus                  ] [  END  ]parsePlusMinus
T[                   _Expression.c(  777): parseCompare                    ] [  END  ]parseCompare
T[                   _Expression.c(  836): parseNotEqual                   ] [  END  ]parseNotEqual
T[                   _Expression.c(  899): parseAndOr                      ] [  END  ]parseAndOr
T[                   _Expression.c(  915): expression_parse                ] [  END  ]expression_parse
T[                   _Expression.c(  591): parseFactor                     ] [  END  ]parseFactor
T[                   _Expression.c(  910): expression_parse                ] [ START ]expression_parse
T[                   _Expression.c(  847): parseAndOr                      ] [ START ]parseAndOr
T[                   _Expression.c(  788): parseNotEqual                   ] [ START ]parseNotEqual
T[                   _Expression.c(  721): parseCompare                    ] [ START ]parseCompare
T[                   _Expression.c(  665): parsePlusMinus                  ] [ START ]parsePlusMinus
T[                   _Expression.c(  602): parseMultiplyDivide             ] [ START ]parseMultiplyDivide
T[                   _Expression.c(  519): parseFactor                     ] [ START ]parseFactor
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  591): parseFactor                     ] [  END  ]parseFactor
T[                   _Expression.c(  654): parseMultiplyDivide             ] [  END  ]parseMultiplyDivide
T[                   _Expression.c(  710): parsePlusMinus                  ] [  END  ]parsePlusMinus
T[                   _Expression.c(  777): parseCompare                    ] [  END  ]parseCompare
T[                   _Expression.c(  836): parseNotEqual                   ] [  END  ]parseNotEqual
T[                   _Expression.c(  899): parseAndOr                      ] [  END  ]parseAndOr
T[                   _Expression.c(  915): expression_parse                ] [  END  ]expression_parse
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  654): parseMultiplyDivide             ] [  END  ]parseMultiplyDivide
T[                   _Expression.c(  710): parsePlusMinus                  ] [  END  ]parsePlusMinus
T[                   _Expression.c(  777): parseCompare                    ] [  END  ]parseCompare
T[                   _Expression.c(  836): parseNotEqual                   ] [  END  ]parseNotEqual
T[                   _Expression.c(  899): parseAndOr                      ] [  END  ]parseAndOr
T[                   _Expression.c(  915): expression_parse                ] [  END  ]expression_parse
T[                   _Expression.c(  189): parseParametersExpression       ] [  END  ]parseParametersExpression
T[                   _Expression.c(  273): parseFunctionCallExpression     ] [  END  ]parseFunctionCallExpression
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                    _Statement.c(  222): parseFunctionCallStatement      ] [  END  ]parseFunctionCallStatement
T[                    _Statement.c(  355): statement_parse                 ] [  END  ]statement_parse
T[                       _Parser.c(  196): addStatement                    ] [ START ]addStatement
T[                       _Parser.c(  197): addStatement                    ] statement is [0x805d140]
T[                       _Parser.c(  199): addStatement                    ] [  END  ]addStatement
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                    _Statement.c(  233): statement_parse                 ] [ START ]statement_parse
T[                    _Statement.c(  355): statement_parse                 ] [  END  ]statement_parse
T[                       _Parser.c(  282): parser_parse                    ] [  END  ]parser_parse
T[                       _Parser.c(   33): parser_dispose                  ] [ START ]parser_dispose
T[                       _Parser.c(   58): parser_dispose                  ] [  END  ]parser_dispose
T[                    _Tokenizer.c(  161): tokenizer_dispose               ] [ START ]tokenizer_dispose
T[                    _Tokenizer.c(  207): tokenizer_dispose               ] [  END  ]tokenizer_dispose
T[                  _Interpreter.c(  145): Interpreter_compile             ] [  END  ]Interpreter_compile
T[                  _Interpreter.c(  157): Interpreter_run                 ] [ START ]Interpreter_run
T[                     _Executor.c(   52): executor_executeStatement       ] [ START ]executor_executeStatement
T[                     _Executor.c(   38): executor_executeFunctionCallStatement] [ START ]executor_executeFunctionCallStatement
T[                    _Evaluator.c(  327): evaluator_reference             ] [ START ]evaluator_reference
T[                    _Evaluator.c(  281): evaluator_functionCall          ] [ START ]evaluator_functionCall
T[                    _Evaluator.c(  199): evaluator_parameters            ] [ START ]evaluator_parameters
T[                    _Evaluator.c(  128): evaluator_operation             ] [ START ]evaluator_operation
T[                    _Evaluator.c(  362): evaluator_expression            ] [ START ]evaluator_expression
T[                    _Evaluator.c(  128): evaluator_operation             ] [ START ]evaluator_operation
T[                    _Evaluator.c(  362): evaluator_expression            ] [ START ]evaluator_expression
T[                    _Evaluator.c(   13): evaluator_integerLiteral        ] [ START ]evaluator_integerLiteral
T[                  _CriaInteger.c(   12): CriaInteger_new                 ] [ START ]CriaInteger_new
T[                  _CriaInteger.c(   21): CriaInteger_new                 ] [  END  ]CriaInteger_new
T[                    _Evaluator.c(   19): evaluator_integerLiteral        ] [  END  ]evaluator_integerLiteral
T[                    _Evaluator.c(  415): evaluator_expression            ] [  END  ]evaluator_expression
T[                    _Evaluator.c(  362): evaluator_expression            ] [ START ]evaluator_expression
T[                    _Evaluator.c(  128): evaluator_operation             ] [ START ]evaluator_operation
T[                    _Evaluator.c(  362): evaluator_expression            ] [ START ]evaluator_expression
T[                    _Evaluator.c(   13): evaluator_integerLiteral        ] [ START ]evaluator_integerLiteral
T[                  _CriaInteger.c(   12): CriaInteger_new                 ] [ START ]CriaInteger_new
T[                  _CriaInteger.c(   21): CriaInteger_new                 ] [  END  ]CriaInteger_new
T[                    _Evaluator.c(   19): evaluator_integerLiteral        ] [  END  ]evaluator_integerLiteral
T[                    _Evaluator.c(  415): evaluator_expression            ] [  END  ]evaluator_expression
T[                    _Evaluator.c(  362): evaluator_expression            ] [ START ]evaluator_expression
T[                    _Evaluator.c(   13): evaluator_integerLiteral        ] [ START ]evaluator_integerLiteral
T[                  _CriaInteger.c(   12): CriaInteger_new                 ] [ START ]CriaInteger_new
T[                  _CriaInteger.c(   21): CriaInteger_new                 ] [  END  ]CriaInteger_new
T[                    _Evaluator.c(   19): evaluator_integerLiteral        ] [  END  ]evaluator_integerLiteral
T[                    _Evaluator.c(  415): evaluator_expression            ] [  END  ]evaluator_expression
T[                  _CriaInteger.c(   12): CriaInteger_new                 ] [ START ]CriaInteger_new
T[                  _CriaInteger.c(   21): CriaInteger_new                 ] [  END  ]CriaInteger_new
T[                    _Evaluator.c(  186): evaluator_operation             ] [  END  ]evaluator_operation
T[                    _Evaluator.c(  415): evaluator_expression            ] [  END  ]evaluator_expression
T[                  _CriaInteger.c(   12): CriaInteger_new                 ] [ START ]CriaInteger_new
T[                  _CriaInteger.c(   21): CriaInteger_new                 ] [  END  ]CriaInteger_new
T[                    _Evaluator.c(  186): evaluator_operation             ] [  END  ]evaluator_operation
T[                    _Evaluator.c(  415): evaluator_expression            ] [  END  ]evaluator_expression
T[                    _Evaluator.c(  362): evaluator_expression            ] [ START ]evaluator_expression
T[                    _Evaluator.c(   13): evaluator_integerLiteral        ] [ START ]evaluator_integerLiteral
T[                  _CriaInteger.c(   12): CriaInteger_new                 ] [ START ]CriaInteger_new
T[                  _CriaInteger.c(   21): CriaInteger_new                 ] [  END  ]CriaInteger_new
T[                    _Evaluator.c(   19): evaluator_integerLiteral        ] [  END  ]evaluator_integerLiteral
T[                    _Evaluator.c(  415): evaluator_expression            ] [  END  ]evaluator_expression
T[                  _CriaInteger.c(   12): CriaInteger_new                 ] [ START ]CriaInteger_new
T[                  _CriaInteger.c(   21): CriaInteger_new                 ] [  END  ]CriaInteger_new
T[                    _Evaluator.c(  186): evaluator_operation             ] [  END  ]evaluator_operation
T[                    _Evaluator.c(  268): evaluator_parameters            ] [  END  ]evaluator_parameters
T[                           _IO.c(   13): io_write                        ] [ START ]io_write
T[                       _CriaId.c(   11): CriaId_new                      ] [ START ]CriaId_new
T[                       _CriaId.c(   16): CriaId_new                      ] [  END  ]CriaId_new
T[                           _IO.c(   92): io_write                        ] [  END  ]io_write
T[                    _Evaluator.c(  314): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  349): evaluator_reference             ] [  END  ]evaluator_reference
T[                     _Executor.c(   40): executor_executeFunctionCallStatement] [  END  ]executor_executeFunctionCallStatement
T[                     _Executor.c(   99): executor_executeStatement       ] [  END  ]executor_executeStatement
T[                  _Interpreter.c(  168): Interpreter_run                 ] [  END  ]Interpreter_run
T[                  _Interpreter.c(   80): Interpreter_dispose             ] [ START ]Interpreter_dispose
T[                  _Interpreter.c(   96): Interpreter_dispose             ] [  END  ]Interpreter_dispose
T[                  _Interpreter.c(   42): interpreter_loadCore            ] [ START ]interpreter_loadCore
T[                  _Interpreter.c(   28): Interpreter_addFunction         ] [ START ]Interpreter_addFunction
T[                  _Interpreter.c(   32): Interpreter_addFunction         ] [  END  ]Interpreter_addFunction
T[                  _Interpreter.c(   28): Interpreter_addFunction         ] [ START ]Interpreter_addFunction
T[                  _Interpreter.c(   32): Interpreter_addFunction         ] [  END  ]Interpreter_addFunction
T[                  _Interpreter.c(   45): interpreter_loadCore            ] [  END  ]interpreter_loadCore
T[                  _Interpreter.c(  107): Interpreter_compile             ] [ START ]Interpreter_compile
T[                    _Tokenizer.c(  128): tokenizer_new                   ] [ START ]tokenizer_new
T[                    _Tokenizer.c(  149): tokenizer_new                   ] [  END  ]tokenizer_new
T[                    _Tokenizer.c( 1300): tokenizer_parse                 ] [ START ]tokenizer_parse
T[                    _Tokenizer.c(  613): parseIdentifier                 ] [ START ]parseIdentifier
T[                    _Tokenizer.c(  308): parseReserved                   ] [ START ]parseReserved
T[                    _Tokenizer.c(  450): parseReserved                   ] [  END  ]parseReserved
T[                    _Tokenizer.c(  462): parseVariableOrFunction         ] [ START ]parseVariableOrFunction
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  507): parseVariableOrFunction         ] [  END  ]parseVariableOrFunction
T[                    _Tokenizer.c(  670): parseIdentifier                 ] [  END  ]parseIdentifier
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(()
T[                    _Tokenizer.c( 1108): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_LEFT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(")
T[                    _Tokenizer.c( 1213): parseOther                      ] Try string literal.
T[                    _Tokenizer.c(  917): parseStringLiteral              ] [ START ]parseStringLiteral
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  968): parseStringLiteral              ] [  END  ]parseStringLiteral
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c(  708): parseSpace                      ] [ START ]parseSpace
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  906): parseSpace                      ] [  END  ]parseSpace
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(")
T[                    _Tokenizer.c( 1213): parseOther                      ] Try string literal.
T[                    _Tokenizer.c(  917): parseStringLiteral              ] [ START ]parseStringLiteral
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  968): parseStringLiteral              ] [  END  ]parseStringLiteral
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.())
T[                    _Tokenizer.c( 1114): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_RIGHT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(
)
T[                    _Tokenizer.c( 1220): parseOther                      ] Create 'TOKEN_TYPE_NEW_LINE'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1229): parseOther                      ] Try indent/dedent literal.
T[                    _Tokenizer.c(  979): parseIndentDedent               ] [ START ]parseIndentDedent
T[                    _Tokenizer.c( 1077): parseIndentDedent               ] [  END  ]parseIndentDedent
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c(  613): parseIdentifier                 ] [ START ]parseIdentifier
T[                    _Tokenizer.c(  308): parseReserved                   ] [ START ]parseReserved
T[                    _Tokenizer.c(  450): parseReserved                   ] [  END  ]parseReserved
T[                    _Tokenizer.c(  462): parseVariableOrFunction         ] [ START ]parseVariableOrFunction
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  507): parseVariableOrFunction         ] [  END  ]parseVariableOrFunction
T[                    _Tokenizer.c(  670): parseIdentifier                 ] [  END  ]parseIdentifier
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(()
T[                    _Tokenizer.c( 1108): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_LEFT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(")
T[                    _Tokenizer.c( 1213): parseOther                      ] Try string literal.
T[                    _Tokenizer.c(  917): parseStringLiteral              ] [ START ]parseStringLiteral
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  968): parseStringLiteral              ] [  END  ]parseStringLiteral
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(,)
T[                    _Tokenizer.c( 1186): parseOther                      ] Try comma literal.
T[                    _Tokenizer.c( 1206): parseOther                      ] Create 'TOKEN_TYPE_COMMA'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c(  613): parseIdentifier                 ] [ START ]parseIdentifier
T[                    _Tokenizer.c(  308): parseReserved                   ] [ START ]parseReserved
T[                    _Tokenizer.c(  450): parseReserved                   ] [  END  ]parseReserved
T[                    _Tokenizer.c(  462): parseVariableOrFunction         ] [ START ]parseVariableOrFunction
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  507): parseVariableOrFunction         ] [  END  ]parseVariableOrFunction
T[                    _Tokenizer.c(  670): parseIdentifier                 ] [  END  ]parseIdentifier
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(()
T[                    _Tokenizer.c( 1108): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_LEFT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.())
T[                    _Tokenizer.c( 1114): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_RIGHT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.())
T[                    _Tokenizer.c( 1114): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_RIGHT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(
)
T[                    _Tokenizer.c( 1220): parseOther                      ] Create 'TOKEN_TYPE_NEW_LINE'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1229): parseOther                      ] Try indent/dedent literal.
T[                    _Tokenizer.c(  979): parseIndentDedent               ] [ START ]parseIndentDedent
T[                    _Tokenizer.c( 1077): parseIndentDedent               ] [  END  ]parseIndentDedent
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1359): tokenizer_parse                 ] result = 1
T[                    _Tokenizer.c( 1360): tokenizer_parse                 ] [  END  ]tokenizer_parse
T[                       _Parser.c(   13): parser_new                      ] [ START ]parser_new
T[                       _Parser.c(   22): parser_new                      ] [  END  ]parser_new
T[                       _Parser.c(  210): parser_parse                    ] [ START ]parser_parse
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                    _Statement.c(  233): statement_parse                 ] [ START ]statement_parse
T[                    _Statement.c(   74): isMatchSubstituteStatement      ] [ START ]isMatchSubstituteStatement
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                    _Statement.c(  106): isMatchSubstituteStatement      ] [  END  ]isMatchSubstituteStatement
T[                    _Statement.c(  178): parseFunctionCallStatement      ] [ START ]parseFunctionCallStatement
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  200): parseFunctionCallExpression     ] [ START ]parseFunctionCallExpression
T[                   _Expression.c(  117): expression_parseParametersExpression] [ START ]expression_parseParametersExpression
T[                   _Expression.c(  910): expression_parse                ] [ START ]expression_parse
T[                   _Expression.c(  847): parseAndOr                      ] [ START ]parseAndOr
T[                   _Expression.c(  788): parseNotEqual                   ] [ START ]parseNotEqual
T[                   _Expression.c(  721): parseCompare                    ] [ START ]parseCompare
T[                   _Expression.c(  665): parsePlusMinus                  ] [ START ]parsePlusMinus
T[                   _Expression.c(  602): parseMultiplyDivide             ] [ START ]parseMultiplyDivide
T[                   _Expression.c(  519): parseFactor                     ] [ START ]parseFactor
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  591): parseFactor                     ] [  END  ]parseFactor
T[                   _Expression.c(  654): parseMultiplyDivide             ] [  END  ]parseMultiplyDivide
T[                   _Expression.c(  910): expression_parse                ] [ START ]expression_parse
T[                   _Expression.c(  847): parseAndOr                      ] [ START ]parseAndOr
T[                   _Expression.c(  788): parseNotEqual                   ] [ START ]parseNotEqual
T[                   _Expression.c(  721): parseCompare                    ] [ START ]parseCompare
T[                   _Expression.c(  665): parsePlusMinus                  ] [ START ]parsePlusMinus
T[                   _Expression.c(  602): parseMultiplyDivide             ] [ START ]parseMultiplyDivide
T[                   _Expression.c(  519): parseFactor                     ] [ START ]parseFactor
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  591): parseFactor                     ] [  END  ]parseFactor
T[                   _Expression.c(  654): parseMultiplyDivide             ] [  END  ]parseMultiplyDivide
T[                   _Expression.c(  710): parsePlusMinus                  ] [  END  ]parsePlusMinus
T[                   _Expression.c(  777): parseCompare                    ] [  END  ]parseCompare
T[                   _Expression.c(  836): parseNotEqual                   ] [  END  ]parseNotEqual
T[                   _Expression.c(  899): parseAndOr                      ] [  END  ]parseAndOr
T[                   _Expression.c(  915): expression_parse                ] [  END  ]expression_parse
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  710): parsePlusMinus                  ] [  END  ]parsePlusMinus
T[                   _Expression.c(  777): parseCompare                    ] [  END  ]parseCompare
T[                   _Expression.c(  836): parseNotEqual                   ] [  END  ]parseNotEqual
T[                   _Expression.c(  899): parseAndOr                      ] [  END  ]parseAndOr
T[                   _Expression.c(  915): expression_parse                ] [  END  ]expression_parse
T[                   _Expression.c(  189): expression_parseParametersExpression] [  END  ]expression_parseParametersExpression
T[                   _Expression.c(  273): parseFunctionCallExpression     ] [  END  ]parseFunctionCallExpression
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                    _Statement.c(  222): parseFunctionCallStatement      ] [  END  ]parseFunctionCallStatement
T[                    _Statement.c(  355): statement_parse                 ] [  END  ]statement_parse
T[                       _Parser.c(  196): addStatement                    ] [ START ]addStatement
T[                       _Parser.c(  197): addStatement                    ] statement is [0x805d498]
T[                       _Parser.c(  199): addStatement                    ] [  END  ]addStatement
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                    _Statement.c(  233): statement_parse                 ] [ START ]statement_parse
T[                    _Statement.c(   74): isMatchSubstituteStatement      ] [ START ]isMatchSubstituteStatement
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                    _Statement.c(  106): isMatchSubstituteStatement      ] [  END  ]isMatchSubstituteStatement
T[                    _Statement.c(  178): parseFunctionCallStatement      ] [ START ]parseFunctionCallStatement
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  200): parseFunctionCallExpression     ] [ START ]parseFunctionCallExpression
T[                   _Expression.c(  117): expression_parseParametersExpression] [ START ]expression_parseParametersExpression
T[                   _Expression.c(  910): expression_parse                ] [ START ]expression_parse
T[                   _Expression.c(  847): parseAndOr                      ] [ START ]parseAndOr
T[                   _Expression.c(  788): parseNotEqual                   ] [ START ]parseNotEqual
T[                   _Expression.c(  721): parseCompare                    ] [ START ]parseCompare
T[                   _Expression.c(  665): parsePlusMinus                  ] [ START ]parsePlusMinus
T[                   _Expression.c(  602): parseMultiplyDivide             ] [ START ]parseMultiplyDivide
T[                   _Expression.c(  519): parseFactor                     ] [ START ]parseFactor
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  591): parseFactor                     ] [  END  ]parseFactor
T[                   _Expression.c(  654): parseMultiplyDivide             ] [  END  ]parseMultiplyDivide
T[                   _Expression.c(  710): parsePlusMinus                  ] [  END  ]parsePlusMinus
T[                   _Expression.c(  777): parseCompare                    ] [  END  ]parseCompare
T[                   _Expression.c(  836): parseNotEqual                   ] [  END  ]parseNotEqual
T[                   _Expression.c(  899): parseAndOr                      ] [  END  ]parseAndOr
T[                   _Expression.c(  915): expression_parse                ] [  END  ]expression_parse
T[                   _Expression.c(  910): expression_parse                ] [ START ]expression_parse
T[                   _Expression.c(  847): parseAndOr                      ] [ START ]parseAndOr
T[                   _Expression.c(  788): parseNotEqual                   ] [ START ]parseNotEqual
T[                   _Expression.c(  721): parseCompare                    ] [ START ]parseCompare
T[                   _Expression.c(  665): parsePlusMinus                  ] [ START ]parsePlusMinus
T[                   _Expression.c(  602): parseMultiplyDivide             ] [ START ]parseMultiplyDivide
T[                   _Expression.c(  519): parseFactor                     ] [ START ]parseFactor
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  200): parseFunctionCallExpression     ] [ START ]parseFunctionCallExpression
T[                   _Expression.c(  117): expression_parseParametersExpression] [ START ]expression_parseParametersExpression
T[                   _Expression.c(  189): expression_parseParametersExpression] [  END  ]expression_parseParametersExpression
T[                   _Expression.c(  273): parseFunctionCallExpression     ] [  END  ]parseFunctionCallExpression
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  591): parseFactor                     ] [  END  ]parseFactor
T[                   _Expression.c(  654): parseMultiplyDivide             ] [  END  ]parseMultiplyDivide
T[                   _Expression.c(  710): parsePlusMinus                  ] [  END  ]parsePlusMinus
T[                   _Expression.c(  777): parseCompare                    ] [  END  ]parseCompare
T[                   _Expression.c(  836): parseNotEqual                   ] [  END  ]parseNotEqual
T[                   _Expression.c(  899): parseAndOr                      ] [  END  ]parseAndOr
T[                   _Expression.c(  915): expression_parse                ] [  END  ]expression_parse
T[                   _Expression.c(  189): expression_parseParametersExpression] [  END  ]expression_parseParametersExpression
T[                   _Expression.c(  273): parseFunctionCallExpression     ] [  END  ]parseFunctionCallExpression
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                    _Statement.c(  222): parseFunctionCallStatement      ] [  END  ]parseFunctionCallStatement
T[                    _Statement.c(  355): statement_parse                 ] [  END  ]statement_parse
T[                       _Parser.c(  196): addStatement                    ] [ START ]addStatement
T[                       _Parser.c(  197): addStatement                    ] statement is [0x805d860]
T[                       _Parser.c(  199): addStatement                    ] [  END  ]addStatement
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                    _Statement.c(  233): statement_parse                 ] [ START ]statement_parse
T[                    _Statement.c(  355): statement_parse                 ] [  END  ]statement_parse
T[                       _Parser.c(  282): parser_parse                    ] [  END  ]parser_parse
T[                       _Parser.c(   33): parser_dispose                  ] [ START ]parser_dispose
T[                       _Parser.c(   58): parser_dispose                  ] [  END  ]parser_dispose
T[                    _Tokenizer.c(  161): tokenizer_dispose               ] [ START ]tokenizer_dispose
T[                    _Tokenizer.c(  207): tokenizer_dispose               ] [  END  ]tokenizer_dispose
T[                  _Interpreter.c(  145): Interpreter_compile             ] [  END  ]Interpreter_compile
T[                  _Interpreter.c(  157): Interpreter_run                 ] [ START ]Interpreter_run
T[                     _Executor.c(   52): executor_executeStatement       ] [ START ]executor_executeStatement
T[                     _Executor.c(   38): executor_executeFunctionCallStatement] [ START ]executor_executeFunctionCallStatement
T[                    _Evaluator.c(  327): evaluator_reference             ] [ START ]evaluator_reference
T[                    _Evaluator.c(  281): evaluator_functionCall          ] [ START ]evaluator_functionCall
T[                    _Evaluator.c(  199): evaluator_parameters            ] [ START ]evaluator_parameters
T[                    _Evaluator.c(  128): evaluator_operation             ] [ START ]evaluator_operation
T[                    _Evaluator.c(  362): evaluator_expression            ] [ START ]evaluator_expression
T[                    _Evaluator.c(   31): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
T[                   _CriaString.c(   12): CriaString_new                  ] [ START ]CriaString_new
T[                   _CriaString.c(   21): CriaString_new                  ] [  END  ]CriaString_new
T[                    _Evaluator.c(   85): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
T[                    _Evaluator.c(  415): evaluator_expression            ] [  END  ]evaluator_expression
T[                    _Evaluator.c(  362): evaluator_expression            ] [ START ]evaluator_expression
T[                    _Evaluator.c(   31): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
T[                   _CriaString.c(   12): CriaString_new                  ] [ START ]CriaString_new
T[                   _CriaString.c(   21): CriaString_new                  ] [  END  ]CriaString_new
T[                    _Evaluator.c(   85): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
T[                    _Evaluator.c(  415): evaluator_expression            ] [  END  ]evaluator_expression
T[                   _CriaString.c(   12): CriaString_new                  ] [ START ]CriaString_new
T[                   _CriaString.c(   21): CriaString_new                  ] [  END  ]CriaString_new
T[                    _Evaluator.c(  186): evaluator_operation             ] [  END  ]evaluator_operation
T[                    _Evaluator.c(  268): evaluator_parameters            ] [  END  ]evaluator_parameters
T[                           _IO.c(   13): io_write                        ] [ START ]io_write
T[                       _CriaId.c(   11): CriaId_new                      ] [ START ]CriaId_new
T[                       _CriaId.c(   16): CriaId_new                      ] [  END  ]CriaId_new
T[                           _IO.c(   92): io_write                        ] [  END  ]io_write
T[                    _Evaluator.c(  314): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  349): evaluator_reference             ] [  END  ]evaluator_reference
T[                     _Executor.c(   40): executor_executeFunctionCallStatement] [  END  ]executor_executeFunctionCallStatement
T[                     _Executor.c(   99): executor_executeStatement       ] [  END  ]executor_executeStatement
T[                     _Executor.c(   52): executor_executeStatement       ] [ START ]executor_executeStatement
T[                     _Executor.c(   38): executor_executeFunctionCallStatement] [ START ]executor_executeFunctionCallStatement
T[                    _Evaluator.c(  327): evaluator_reference             ] [ START ]evaluator_reference
T[                    _Evaluator.c(  281): evaluator_functionCall          ] [ START ]evaluator_functionCall
T[                    _Evaluator.c(  199): evaluator_parameters            ] [ START ]evaluator_parameters
T[                    _Evaluator.c(   31): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
T[                   _CriaString.c(   12): CriaString_new                  ] [ START ]CriaString_new
T[                   _CriaString.c(   21): CriaString_new                  ] [  END  ]CriaString_new
T[                    _Evaluator.c(   85): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
T[                    _Evaluator.c(  327): evaluator_reference             ] [ START ]evaluator_reference
T[                    _Evaluator.c(  281): evaluator_functionCall          ] [ START ]evaluator_functionCall
T[                    _Evaluator.c(  199): evaluator_parameters            ] [ START ]evaluator_parameters
T[                    _Evaluator.c(  268): evaluator_parameters            ] [  END  ]evaluator_parameters
T[                           _IO.c(  104): io_read                         ] [ START ]io_read
T[                   _CriaString.c(   12): CriaString_new                  ] [ START ]CriaString_new
T[                   _CriaString.c(   21): CriaString_new                  ] [  END  ]CriaString_new
T[                           _IO.c(  139): io_read                         ] [  END  ]io_read
T[                    _Evaluator.c(  314): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  349): evaluator_reference             ] [  END  ]evaluator_reference
T[                    _Evaluator.c(  268): evaluator_parameters            ] [  END  ]evaluator_parameters
T[                           _IO.c(   13): io_write                        ] [ START ]io_write
T[                       _CriaId.c(   11): CriaId_new                      ] [ START ]CriaId_new
T[                       _CriaId.c(   16): CriaId_new                      ] [  END  ]CriaId_new
T[                           _IO.c(   92): io_write                        ] [  END  ]io_write
T[                    _Evaluator.c(  314): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  349): evaluator_reference             ] [  END  ]evaluator_reference
T[                     _Executor.c(   40): executor_executeFunctionCallStatement] [  END  ]executor_executeFunctionCallStatement
T[                     _Executor.c(   99): executor_executeStatement       ] [  END  ]executor_executeStatement
T[                  _Interpreter.c(  168): Interpreter_run                 ] [  END  ]Interpreter_run
T[                  _Interpreter.c(   80): Interpreter_dispose             ] [ START ]Interpreter_dispose
T[                  _Interpreter.c(   96): Interpreter_dispose             ] [  END  ]Interpreter_dispose
T[                  _Interpreter.c(   42): interpreter_loadCore            ] [ START ]interpreter_loadCore
T[                  _Interpreter.c(   28): Interpreter_addFunction         ] [ START ]Interpreter_addFunction
T[                  _Interpreter.c(   32): Interpreter_addFunction         ] [  END  ]Interpreter_addFunction
T[                  _Interpreter.c(   28): Interpreter_addFunction         ] [ START ]Interpreter_addFunction
T[                  _Interpreter.c(   32): Interpreter_addFunction         ] [  END  ]Interpreter_addFunction
T[                  _Interpreter.c(   45): interpreter_loadCore            ] [  END  ]interpreter_loadCore
T[                  _Interpreter.c(  107): Interpreter_compile             ] [ START ]Interpreter_compile
T[                    _Tokenizer.c(  128): tokenizer_new                   ] [ START ]tokenizer_new
T[                    _Tokenizer.c(  149): tokenizer_new                   ] [  END  ]tokenizer_new
T[                    _Tokenizer.c( 1300): tokenizer_parse                 ] [ START ]tokenizer_parse
T[                    _Tokenizer.c(  613): parseIdentifier                 ] [ START ]parseIdentifier
T[                    _Tokenizer.c(  308): parseReserved                   ] [ START ]parseReserved
T[                    _Tokenizer.c(  450): parseReserved                   ] [  END  ]parseReserved
T[                    _Tokenizer.c(  462): parseVariableOrFunction         ] [ START ]parseVariableOrFunction
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  507): parseVariableOrFunction         ] [  END  ]parseVariableOrFunction
T[                    _Tokenizer.c(  670): parseIdentifier                 ] [  END  ]parseIdentifier
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(()
T[                    _Tokenizer.c( 1108): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_LEFT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(")
T[                    _Tokenizer.c( 1213): parseOther                      ] Try string literal.
T[                    _Tokenizer.c(  917): parseStringLiteral              ] [ START ]parseStringLiteral
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  968): parseStringLiteral              ] [  END  ]parseStringLiteral
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c(  708): parseSpace                      ] [ START ]parseSpace
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  906): parseSpace                      ] [  END  ]parseSpace
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(")
T[                    _Tokenizer.c( 1213): parseOther                      ] Try string literal.
T[                    _Tokenizer.c(  917): parseStringLiteral              ] [ START ]parseStringLiteral
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  968): parseStringLiteral              ] [  END  ]parseStringLiteral
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.())
T[                    _Tokenizer.c( 1114): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_RIGHT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(
)
T[                    _Tokenizer.c( 1220): parseOther                      ] Create 'TOKEN_TYPE_NEW_LINE'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1229): parseOther                      ] Try indent/dedent literal.
T[                    _Tokenizer.c(  979): parseIndentDedent               ] [ START ]parseIndentDedent
T[                    _Tokenizer.c( 1077): parseIndentDedent               ] [  END  ]parseIndentDedent
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c(  613): parseIdentifier                 ] [ START ]parseIdentifier
T[                    _Tokenizer.c(  308): parseReserved                   ] [ START ]parseReserved
T[                    _Tokenizer.c(  450): parseReserved                   ] [  END  ]parseReserved
T[                    _Tokenizer.c(  462): parseVariableOrFunction         ] [ START ]parseVariableOrFunction
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  507): parseVariableOrFunction         ] [  END  ]parseVariableOrFunction
T[                    _Tokenizer.c(  670): parseIdentifier                 ] [  END  ]parseIdentifier
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(()
T[                    _Tokenizer.c( 1108): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_LEFT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(")
T[                    _Tokenizer.c( 1213): parseOther                      ] Try string literal.
T[                    _Tokenizer.c(  917): parseStringLiteral              ] [ START ]parseStringLiteral
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  968): parseStringLiteral              ] [  END  ]parseStringLiteral
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(,)
T[                    _Tokenizer.c( 1186): parseOther                      ] Try comma literal.
T[                    _Tokenizer.c( 1206): parseOther                      ] Create 'TOKEN_TYPE_COMMA'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c(  613): parseIdentifier                 ] [ START ]parseIdentifier
T[                    _Tokenizer.c(  308): parseReserved                   ] [ START ]parseReserved
T[                    _Tokenizer.c(  450): parseReserved                   ] [  END  ]parseReserved
T[                    _Tokenizer.c(  462): parseVariableOrFunction         ] [ START ]parseVariableOrFunction
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c(  507): parseVariableOrFunction         ] [  END  ]parseVariableOrFunction
T[                    _Tokenizer.c(  670): parseIdentifier                 ] [  END  ]parseIdentifier
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(()
T[                    _Tokenizer.c( 1108): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_LEFT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.())
T[                    _Tokenizer.c( 1114): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_RIGHT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.())
T[                    _Tokenizer.c( 1114): parseOther                      ] Create 'TOKEN_TYPE_PARENTHESIS_RIGHT'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1088): parseOther                      ] [ START ]parseOther
T[                    _Tokenizer.c( 1102): parseOther                      ] Check first charactor.(
)
T[                    _Tokenizer.c( 1220): parseOther                      ] Create 'TOKEN_TYPE_NEW_LINE'
T[                    _Tokenizer.c(   81): token_new                       ] [ START ]token_new
T[                    _Tokenizer.c(   87): token_new                       ] [  END  ]token_new
T[                    _Tokenizer.c( 1229): parseOther                      ] Try indent/dedent literal.
T[                    _Tokenizer.c(  979): parseIndentDedent               ] [ START ]parseIndentDedent
T[                    _Tokenizer.c( 1077): parseIndentDedent               ] [  END  ]parseIndentDedent
T[                    _Tokenizer.c( 1253): parseOther                      ] [  END  ]parseOther
T[                    _Tokenizer.c( 1359): tokenizer_parse                 ] result = 1
T[                    _Tokenizer.c( 1360): tokenizer_parse                 ] [  END  ]tokenizer_parse
T[                       _Parser.c(   13): parser_new                      ] [ START ]parser_new
T[                       _Parser.c(   22): parser_new                      ] [  END  ]parser_new
T[                       _Parser.c(  210): parser_parse                    ] [ START ]parser_parse
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                    _Statement.c(  233): statement_parse                 ] [ START ]statement_parse
T[                    _Statement.c(   74): isMatchSubstituteStatement      ] [ START ]isMatchSubstituteStatement
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                    _Statement.c(  106): isMatchSubstituteStatement      ] [  END  ]isMatchSubstituteStatement
T[                    _Statement.c(  178): parseFunctionCallStatement      ] [ START ]parseFunctionCallStatement
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  200): parseFunctionCallExpression     ] [ START ]parseFunctionCallExpression
T[                   _Expression.c(  117): expression_parseParametersExpression] [ START ]expression_parseParametersExpression
T[                   _Expression.c(  910): expression_parse                ] [ START ]expression_parse
T[                   _Expression.c(  847): parseAndOr                      ] [ START ]parseAndOr
T[                   _Expression.c(  788): parseNotEqual                   ] [ START ]parseNotEqual
T[                   _Expression.c(  721): parseCompare                    ] [ START ]parseCompare
T[                   _Expression.c(  665): parsePlusMinus                  ] [ START ]parsePlusMinus
T[                   _Expression.c(  602): parseMultiplyDivide             ] [ START ]parseMultiplyDivide
T[                   _Expression.c(  519): parseFactor                     ] [ START ]parseFactor
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  591): parseFactor                     ] [  END  ]parseFactor
T[                   _Expression.c(  654): parseMultiplyDivide             ] [  END  ]parseMultiplyDivide
T[                   _Expression.c(  910): expression_parse                ] [ START ]expression_parse
T[                   _Expression.c(  847): parseAndOr                      ] [ START ]parseAndOr
T[                   _Expression.c(  788): parseNotEqual                   ] [ START ]parseNotEqual
T[                   _Expression.c(  721): parseCompare                    ] [ START ]parseCompare
T[                   _Expression.c(  665): parsePlusMinus                  ] [ START ]parsePlusMinus
T[                   _Expression.c(  602): parseMultiplyDivide             ] [ START ]parseMultiplyDivide
T[                   _Expression.c(  519): parseFactor                     ] [ START ]parseFactor
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  591): parseFactor                     ] [  END  ]parseFactor
T[                   _Expression.c(  654): parseMultiplyDivide             ] [  END  ]parseMultiplyDivide
T[                   _Expression.c(  710): parsePlusMinus                  ] [  END  ]parsePlusMinus
T[                   _Expression.c(  777): parseCompare                    ] [  END  ]parseCompare
T[                   _Expression.c(  836): parseNotEqual                   ] [  END  ]parseNotEqual
T[                   _Expression.c(  899): parseAndOr                      ] [  END  ]parseAndOr
T[                   _Expression.c(  915): expression_parse                ] [  END  ]expression_parse
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  710): parsePlusMinus                  ] [  END  ]parsePlusMinus
T[                   _Expression.c(  777): parseCompare                    ] [  END  ]parseCompare
T[                   _Expression.c(  836): parseNotEqual                   ] [  END  ]parseNotEqual
T[                   _Expression.c(  899): parseAndOr                      ] [  END  ]parseAndOr
T[                   _Expression.c(  915): expression_parse                ] [  END  ]expression_parse
T[                   _Expression.c(  189): expression_parseParametersExpression] [  END  ]expression_parseParametersExpression
T[                   _Expression.c(  273): parseFunctionCallExpression     ] [  END  ]parseFunctionCallExpression
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                    _Statement.c(  222): parseFunctionCallStatement      ] [  END  ]parseFunctionCallStatement
T[                    _Statement.c(  355): statement_parse                 ] [  END  ]statement_parse
T[                       _Parser.c(  196): addStatement                    ] [ START ]addStatement
T[                       _Parser.c(  197): addStatement                    ] statement is [0x805d498]
T[                       _Parser.c(  199): addStatement                    ] [  END  ]addStatement
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                    _Statement.c(  233): statement_parse                 ] [ START ]statement_parse
T[                    _Statement.c(   74): isMatchSubstituteStatement      ] [ START ]isMatchSubstituteStatement
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                    _Statement.c(  106): isMatchSubstituteStatement      ] [  END  ]isMatchSubstituteStatement
T[                    _Statement.c(  178): parseFunctionCallStatement      ] [ START ]parseFunctionCallStatement
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  200): parseFunctionCallExpression     ] [ START ]parseFunctionCallExpression
T[                   _Expression.c(  117): expression_parseParametersExpression] [ START ]expression_parseParametersExpression
T[                   _Expression.c(  910): expression_parse                ] [ START ]expression_parse
T[                   _Expression.c(  847): parseAndOr                      ] [ START ]parseAndOr
T[                   _Expression.c(  788): parseNotEqual                   ] [ START ]parseNotEqual
T[                   _Expression.c(  721): parseCompare                    ] [ START ]parseCompare
T[                   _Expression.c(  665): parsePlusMinus                  ] [ START ]parsePlusMinus
T[                   _Expression.c(  602): parseMultiplyDivide             ] [ START ]parseMultiplyDivide
T[                   _Expression.c(  519): parseFactor                     ] [ START ]parseFactor
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  591): parseFactor                     ] [  END  ]parseFactor
T[                   _Expression.c(  654): parseMultiplyDivide             ] [  END  ]parseMultiplyDivide
T[                   _Expression.c(  710): parsePlusMinus                  ] [  END  ]parsePlusMinus
T[                   _Expression.c(  777): parseCompare                    ] [  END  ]parseCompare
T[                   _Expression.c(  836): parseNotEqual                   ] [  END  ]parseNotEqual
T[                   _Expression.c(  899): parseAndOr                      ] [  END  ]parseAndOr
T[                   _Expression.c(  915): expression_parse                ] [  END  ]expression_parse
T[                   _Expression.c(  910): expression_parse                ] [ START ]expression_parse
T[                   _Expression.c(  847): parseAndOr                      ] [ START ]parseAndOr
T[                   _Expression.c(  788): parseNotEqual                   ] [ START ]parseNotEqual
T[                   _Expression.c(  721): parseCompare                    ] [ START ]parseCompare
T[                   _Expression.c(  665): parsePlusMinus                  ] [ START ]parsePlusMinus
T[                   _Expression.c(  602): parseMultiplyDivide             ] [ START ]parseMultiplyDivide
T[                   _Expression.c(  519): parseFactor                     ] [ START ]parseFactor
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  200): parseFunctionCallExpression     ] [ START ]parseFunctionCallExpression
T[                   _Expression.c(  117): expression_parseParametersExpression] [ START ]expression_parseParametersExpression
T[                   _Expression.c(  189): expression_parseParametersExpression] [  END  ]expression_parseParametersExpression
T[                   _Expression.c(  273): parseFunctionCallExpression     ] [  END  ]parseFunctionCallExpression
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                   _Expression.c(   12): expression_new                  ] [ START ]expression_new
T[                   _Expression.c(   16): expression_new                  ] [  END  ]expression_new
T[                   _Expression.c(  591): parseFactor                     ] [  END  ]parseFactor
T[                   _Expression.c(  654): parseMultiplyDivide             ] [  END  ]parseMultiplyDivide
T[                   _Expression.c(  710): parsePlusMinus                  ] [  END  ]parsePlusMinus
T[                   _Expression.c(  777): parseCompare                    ] [  END  ]parseCompare
T[                   _Expression.c(  836): parseNotEqual                   ] [  END  ]parseNotEqual
T[                   _Expression.c(  899): parseAndOr                      ] [  END  ]parseAndOr
T[                   _Expression.c(  915): expression_parse                ] [  END  ]expression_parse
T[                   _Expression.c(  189): expression_parseParametersExpression] [  END  ]expression_parseParametersExpression
T[                   _Expression.c(  273): parseFunctionCallExpression     ] [  END  ]parseFunctionCallExpression
T[                   _Expression.c(  371): expression_parseReferenceExpression] [ START ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                   _Expression.c(  508): expression_parseReferenceExpression] [  END  ]expression_parseReferenceExpression
T[                    _Statement.c(  222): parseFunctionCallStatement      ] [  END  ]parseFunctionCallStatement
T[                    _Statement.c(  355): statement_parse                 ] [  END  ]statement_parse
T[                       _Parser.c(  196): addStatement                    ] [ START ]addStatement
T[                       _Parser.c(  197): addStatement                    ] statement is [0x805d860]
T[                       _Parser.c(  199): addStatement                    ] [  END  ]addStatement
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                       _Parser.c(  164): parser_returnToMark             ] [ START ]parser_returnToMark
T[                       _Parser.c(  175): parser_returnToMark             ] [  END  ]parser_returnToMark
T[                    _Statement.c(  233): statement_parse                 ] [ START ]statement_parse
T[                    _Statement.c(  355): statement_parse                 ] [  END  ]statement_parse
T[                       _Parser.c(  282): parser_parse                    ] [  END  ]parser_parse
T[                       _Parser.c(   33): parser_dispose                  ] [ START ]parser_dispose
T[                       _Parser.c(   58): parser_dispose                  ] [  END  ]parser_dispose
T[                    _Tokenizer.c(  161): tokenizer_dispose               ] [ START ]tokenizer_dispose
T[                    _Tokenizer.c(  207): tokenizer_dispose               ] [  END  ]tokenizer_dispose
T[                  _Interpreter.c(  145): Interpreter_compile             ] [  END  ]Interpreter_compile
T[                  _Interpreter.c(  157): Interpreter_run                 ] [ START ]Interpreter_run
T[                     _Executor.c(   52): executor_executeStatement       ] [ START ]executor_executeStatement
T[                     _Executor.c(   38): executor_executeFunctionCallStatement] [ START ]executor_executeFunctionCallStatement
T[                    _Evaluator.c(  327): evaluator_reference             ] [ START ]evaluator_reference
T[                    _Evaluator.c(  281): evaluator_functionCall          ] [ START ]evaluator_functionCall
T[                    _Evaluator.c(  199): evaluator_parameters            ] [ START ]evaluator_parameters
T[                    _Evaluator.c(  128): evaluator_operation             ] [ START ]evaluator_operation
T[                    _Evaluator.c(  362): evaluator_expression            ] [ START ]evaluator_expression
T[                    _Evaluator.c(   31): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
T[                   _CriaString.c(   12): CriaString_new                  ] [ START ]CriaString_new
T[                   _CriaString.c(   21): CriaString_new                  ] [  END  ]CriaString_new
T[                    _Evaluator.c(   85): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
T[                    _Evaluator.c(  415): evaluator_expression            ] [  END  ]evaluator_expression
T[                    _Evaluator.c(  362): evaluator_expression            ] [ START ]evaluator_expression
T[                    _Evaluator.c(   31): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
T[                   _CriaString.c(   12): CriaString_new                  ] [ START ]CriaString_new
T[                   _CriaString.c(   21): CriaString_new                  ] [  END  ]CriaString_new
T[                    _Evaluator.c(   85): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
T[                    _Evaluator.c(  415): evaluator_expression            ] [  END  ]evaluator_expression
T[                   _CriaString.c(   12): CriaString_new                  ] [ START ]CriaString_new
T[                   _CriaString.c(   21): CriaString_new                  ] [  END  ]CriaString_new
T[                    _Evaluator.c(  186): evaluator_operation             ] [  END  ]evaluator_operation
T[                    _Evaluator.c(  268): evaluator_parameters            ] [  END  ]evaluator_parameters
T[                           _IO.c(   13): io_write                        ] [ START ]io_write
T[                       _CriaId.c(   11): CriaId_new                      ] [ START ]CriaId_new
T[                       _CriaId.c(   16): CriaId_new                      ] [  END  ]CriaId_new
T[                           _IO.c(   92): io_write                        ] [  END  ]io_write
T[                    _Evaluator.c(  314): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  349): evaluator_reference             ] [  END  ]evaluator_reference
T[                     _Executor.c(   40): executor_executeFunctionCallStatement] [  END  ]executor_executeFunctionCallStatement
T[                     _Executor.c(   99): executor_executeStatement       ] [  END  ]executor_executeStatement
T[                     _Executor.c(   52): executor_executeStatement       ] [ START ]executor_executeStatement
T[                     _Executor.c(   38): executor_executeFunctionCallStatement] [ START ]executor_executeFunctionCallStatement
T[                    _Evaluator.c(  327): evaluator_reference             ] [ START ]evaluator_reference
T[                    _Evaluator.c(  281): evaluator_functionCall          ] [ START ]evaluator_functionCall
T[                    _Evaluator.c(  199): evaluator_parameters            ] [ START ]evaluator_parameters
T[                    _Evaluator.c(   31): evaluator_stringLiteral         ] [ START ]evaluator_stringLiteral
T[                   _CriaString.c(   12): CriaString_new                  ] [ START ]CriaString_new
T[                   _CriaString.c(   21): CriaString_new                  ] [  END  ]CriaString_new
T[                    _Evaluator.c(   85): evaluator_stringLiteral         ] [  END  ]evaluator_stringLiteral
T[                    _Evaluator.c(  327): evaluator_reference             ] [ START ]evaluator_reference
T[                    _Evaluator.c(  281): evaluator_functionCall          ] [ START ]evaluator_functionCall
T[                    _Evaluator.c(  199): evaluator_parameters            ] [ START ]evaluator_parameters
T[                    _Evaluator.c(  268): evaluator_parameters            ] [  END  ]evaluator_parameters
T[                           _IO.c(  104): io_read                         ] [ START ]io_read
T[                   _CriaString.c(   12): CriaString_new                  ] [ START ]CriaString_new
T[                   _CriaString.c(   21): CriaString_new                  ] [  END  ]CriaString_new
T[                           _IO.c(  139): io_read                         ] [  END  ]io_read
T[                    _Evaluator.c(  314): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  349): evaluator_reference             ] [  END  ]evaluator_reference
T[                    _Evaluator.c(  268): evaluator_parameters            ] [  END  ]evaluator_parameters
T[                           _IO.c(   13): io_write                        ] [ START ]io_write
T[                       _CriaId.c(   11): CriaId_new                      ] [ START ]CriaId_new
T[                       _CriaId.c(   16): CriaId_new                      ] [  END  ]CriaId_new
T[                           _IO.c(   92): io_write                        ] [  END  ]io_write
T[                    _Evaluator.c(  314): evaluator_functionCall          ] [  END  ]evaluator_functionCall
T[                    _Evaluator.c(  349): evaluator_reference             ] [  END  ]evaluator_reference
T[                     _Executor.c(   40): executor_executeFunctionCallStatement] [  END  ]executor_executeFunctionCallStatement
T[                     _Executor.c(   99): executor_executeStatement       ] [  END  ]executor_executeStatement
T[                  _Interpreter.c(  168): Interpreter_run                 ] [  END  ]Interpreter_run
T[                  _Interpreter.c(   80): Interpreter_dispose             ] [ START ]Interpreter_dispose
T[                  _Interpreter.c(   96): Interpreter_dispose             ] [  END  ]Interpreter_dispose
